"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[921],{43215:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var o=r(74848),t=r(28453);const s={title:"RedHat OpenShift",taxonomy:{category:"docs"},slug:"/deploying/openshift"},c=void 0,a={id:"deploying/openshift/openshift",title:"RedHat OpenShift",description:"Deploy Separate NeuVector Components with RedHat OpenShift",source:"@site/versioned_docs/version-5.3/02.deploying/04.openshift/04.openshift.md",sourceDirName:"02.deploying/04.openshift",slug:"/deploying/openshift",permalink:"/deploying/openshift",draft:!1,unlisted:!1,editUrl:"https://github.com/neuvector/docs/edit/main/versioned_docs/version-5.3/02.deploying/04.openshift/04.openshift.md",tags:[],version:"5.3",sidebarPosition:4,frontMatter:{title:"RedHat OpenShift",taxonomy:{category:"docs"},slug:"/deploying/openshift"},sidebar:"tutorialSidebar",previous:{title:"Rancher Deployment",permalink:"/deploying/rancher"},next:{title:"Docker & Mirantis Kubernetes Engine",permalink:"/deploying/docker"}},i={},l=[{value:"Deploy Separate NeuVector Components with RedHat OpenShift",id:"deploy-separate-neuvector-components-with-redhat-openshift",level:3},{value:"NeuVector Images on Docker Hub",id:"neuvector-images-on-docker-hub",level:4},{value:"Deploy on OpenShift",id:"deploy-on-openshift",level:3},{value:"Using Node Labels for Manager and Controller Nodes",id:"using-node-labels-for-manager-and-controller-nodes",level:3},{value:"Updating the CVE Database on OpenShift Deployments",id:"updating-the-cve-database-on-openshift-deployments",level:3},{value:"Rolling Updates",id:"rolling-updates",level:3},{value:"Enabling the REST API",id:"enabling-the-rest-api",level:3},{value:"Enable/Disable Scheduling on the Master Node",id:"enabledisable-scheduling-on-the-master-node",level:3},{value:"OpenShift Deployment in Non-Privileged Mode",id:"openshift-deployment-in-non-privileged-mode",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components},{TabItem:r,Tabs:s}=n;return r||p("TabItem",!0),s||p("Tabs",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h3,{id:"deploy-separate-neuvector-components-with-redhat-openshift",children:"Deploy Separate NeuVector Components with RedHat OpenShift"}),"\n",(0,o.jsx)(n.p,{children:"NeuVector is compatible with standard ovs SDN plug-ins as well as others such as flannel, weave, or calico. The samples below assume a standard ovs plug-in is used. This also assumes a local docker registry will be used (see instructions at end for creating the secret for dynamically pulling from neuvector or Docker Hub)."}),"\n",(0,o.jsxs)(n.p,{children:["NeuVector supports Helm-based deployment with a ",(0,o.jsx)(n.a,{href:"https://github.com/neuvector/neuvector-helm",children:"Helm chart"})," at ",(0,o.jsx)(n.a,{href:"https://github.com/neuvector/neuvector-helm",children:"https://github.com/neuvector/neuvector-helm"}),". The NeuVector Operator can also be used to deploy and is based on the Helm chart. To deploy the latest NeuVector container versions using an Operator, please use either the Red Hat Certified Operator from Operator Hub or the community operator, as detailed in the ",(0,o.jsx)(n.a,{href:"/deploying/production/operators",children:"Operator section"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"To deploy manually, first pull the appropriate NeuVector containers from the NeuVector registry into your local registry. Note: the scanner image should be pulled regularly for CVE database updates from NeuVector."}),"\n",(0,o.jsx)(n.h4,{id:"neuvector-images-on-docker-hub",children:"NeuVector Images on Docker Hub"}),"\n",(0,o.jsxs)("p",{children:["The images are on the NeuVector Docker Hub registry. Use the appropriate version tag for the manager, controller, enforcer, and leave the version as 'latest' for scanner and updater. For example:\n",(0,o.jsx)("li",{children:"neuvector/manager:5.3.2"}),"\n",(0,o.jsx)("li",{children:"neuvector/controller:5.3.2"}),"\n",(0,o.jsx)("li",{children:"neuvector/enforcer:5.3.2"}),"\n",(0,o.jsxs)("li",{children:["neuvector/scanner",":latest"]}),"\n",(0,o.jsxs)("li",{children:["neuvector/updater",":latest"]})]}),"\n",(0,o.jsx)("p",{children:"Please be sure to update the image references in appropriate yaml files."}),"\n",(0,o.jsxs)("p",{children:["If deploying with the current NeuVector Helm chart (v1.8.9+), the following changes should be made to values.yml:\n",(0,o.jsx)("li",{children:"Update the registry to docker.io"}),"\n",(0,o.jsx)("li",{children:"Update image names/tags to the current version on Docker hub, as shown above"}),"\n",(0,o.jsx)("li",{children:"Leave the imagePullSecrets empty"})]}),"\n",(0,o.jsx)(n.h3,{id:"deploy-on-openshift",children:"Deploy on OpenShift"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"docker login docker.io\ndocker pull docker.io/neuvector/manager:<version>\ndocker pull docker.io/neuvector/controller:<version>\ndocker pull docker.io/neuvector/enforcer:<version>\ndocker pull docker.io/neuvector/scanner\ndocker pull docker.io/neuvector/updater\ndocker logout docker.io\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The sample file below will deploy one manager, 3 controllers, and 2 scanner pods. It will deploy an enforcer on every node as a daemonset, including on the master node (if schedulable). See the bottom section for specifying dedicated manager or controller nodes using node labels. Note: It is not recommended to deploy (scale) more than one manager behind a load balancer due to potential session state issues. If you plan to use a PersistentVolume claim to store the backup of NeuVector config files, please see the general Backup/Persistent Data section in the ",(0,o.jsx)(n.a,{href:"/deploying/production#backups-and-persistent-data",children:"Production Deployment"})," overview."]}),"\n",(0,o.jsx)(n.p,{children:"Next, set the route and allow privileged NeuVector containers using the instructions below. By default, OpenShift does not allow privileged containers. Also, by default OpenShift does not schedule pods on the Master node. See the instructions at the end to enable/disable this."}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"Please see the Enterprise Integration section for details on integration with OpenShift Role Based Access Controls (RBACs)."})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Login as a normal user"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc login -u <user_name>\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsx)(n.li,{children:"Create a new project."}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"If the --node-selector argument is used when creating a project this will restrict pod placement such as for the NeuVector enforcer to specific nodes."})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc new-project neuvector\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"3",children:["\n",(0,o.jsx)(n.li,{children:"Push NeuVector images to OpenShift docker registry."}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"For OpenShift 4.6+, change docker-registry.default.svc below to image-registry.openshift-image-registry.svc in the commands below"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"docker login -u <user_name> -p `oc whoami -t` docker-registry.default.svc:5000\ndocker tag docker.io/neuvector/enforcer:<version> docker-registry.default.svc:5000/neuvector/enforcer:<version>\ndocker tag docker.io/neuvector/controller:<version> docker-registry.default.svc:5000/neuvector/controller:<version>\ndocker tag docker.io/neuvector/manager:<version> docker-registry.default.svc:5000/neuvector/manager:<version>\ndocker tag docker.io/neuvector/scanner docker-registry.default.svc:5000/neuvector/scanner\ndocker tag docker.io/neuvector/updater docker-registry.default.svc:5000/neuvector/updater\ndocker push docker-registry.default.svc:5000/neuvector/enforcer:<version>\ndocker push docker-registry.default.svc:5000/neuvector/controller:<version>\ndocker push docker-registry.default.svc:5000/neuvector/manager:<version>\ndocker push docker-registry.default.svc:5000/neuvector/scanner\ndocker push docker-registry.default.svc:5000/neuvector/updater\ndocker logout docker-registry.default.svc:5000\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"Please see the section Updating the CVE Database below for recommendations for keeping the latest scanner image updated in your registry."})}),"\n",(0,o.jsxs)(n.ol,{start:"4",children:["\n",(0,o.jsxs)(n.li,{children:["Login as system",":admin"," account"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc login -u system:admin\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"5",children:["\n",(0,o.jsx)(n.li,{children:"Create Service Accounts and Grant Access to the Privileged SCC"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc create sa controller -n neuvector\noc create sa enforcer -n neuvector\noc create sa basic -n neuvector\noc create sa updater -n neuvector\noc create sa scanner -n neuvector\noc create sa registry-adapter -n neuvector\noc -n neuvector adm policy add-scc-to-user privileged -z enforcer\n"})}),"\n",(0,o.jsx)(n.p,{children:"The following info will be added in the Privileged SCC\nusers:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"- system:serviceaccount:neuvector:enforcer\n"})}),"\n",(0,o.jsx)(n.p,{children:"Add a new neuvector-scc-controller scc for controller service account in Openshift, by creating a file with:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"allowHostDirVolumePlugin: false\nallowHostIPC: false\nallowHostNetwork: false\nallowHostPID: false\nallowHostPorts: false\nallowPrivilegeEscalation: false\nallowPrivilegedContainer: false\nallowedCapabilities: null\napiVersion: security.openshift.io/v1\ndefaultAddCapabilities: null\nfsGroup:\n  type: RunAsAny\ngroups: []\nkind: SecurityContextConstraints\nmetadata:\n  name: neuvector-scc-controller\npriority: null\nreadOnlyRootFilesystem: false\nrequiredDropCapabilities:\n- ALL\nrunAsUser:\n  type: RunAsAny\nseLinuxContext:\n  type: RunAsAny\nsupplementalGroups:\n  type: RunAsAny\nusers: []\nvolumes:\n- configMap\n- downwardAPI\n- emptyDir\n- persistentVolumeClaim\n- azureFile\n- projected\n- secret\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then apply"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc apply -f (filename)\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then run the following command to bind controller service account to neuvector-scc-controller scc"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc -n neuvector adm policy add-scc-to-user neuvector-scc-controller -z controller\n"})}),"\n",(0,o.jsx)(n.p,{children:"In OpenShift 4.6+ use the following to check:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc get rolebinding system:openshift:scc:privileged -n neuvector -o wide\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"NAME                              ROLE                                          AGE     USERS   GROUPS   SERVICEACCOUNTS\nsystem:openshift:scc:privileged   ClusterRole/system:openshift:scc:privileged   9m22s                    neuvector/enforcer\n"})}),"\n",(0,o.jsx)(n.p,{children:"Run this command to check NeuVector service for Controller:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc get rolebinding system:openshift:scc:neuvector-scc-controller n neuvector -o wide\n"})}),"\n",(0,o.jsx)(n.p,{children:"The output will look like"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"NAME                                            ROLE                                                        AGE     USERS   GROUPS   SERVICEACCOUNTS\nSystem:openshift:scc:neuvector-scc-controller   ClusterRole/system:openshift:scc:neuvector-scc-controller   9m22s                    neuvector/controller\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"6",children:["\n",(0,o.jsx)(n.li,{children:"Create the custom resources (CRD) for NeuVector security rules. For OpenShift 4.6+ (Kubernetes 1.19+):"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc apply -f https://raw.githubusercontent.com/neuvector/manifests/main/kubernetes/5.3.0/crd-k8s-1.19.yaml\noc apply -f https://raw.githubusercontent.com/neuvector/manifests/main/kubernetes/5.3.0/waf-crd-k8s-1.19.yaml\noc apply -f https://raw.githubusercontent.com/neuvector/manifests/main/kubernetes/5.3.0/dlp-crd-k8s-1.19.yaml\noc apply -f https://raw.githubusercontent.com/neuvector/manifests/main/kubernetes/5.3.0/com-crd-k8s-1.19.yaml\noc apply -f https://raw.githubusercontent.com/neuvector/manifests/main/kubernetes/5.3.0/vul-crd-k8s-1.19.yaml\noc apply -f https://raw.githubusercontent.com/neuvector/manifests/main/kubernetes/5.3.0/admission-crd-k8s-1.19.yaml\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"7",children:["\n",(0,o.jsx)(n.li,{children:"Add read permission to access the kubernetes API and OpenShift RBACs. IMPORTANT: The standard NeuVector 5.2+ deployment uses least-privileged service accounts instead of the default. See below if upgrading to 5.2+ from a version prior to 5.2."}),"\n"]}),"\n",(0,o.jsxs)(n.admonition,{title:"attention",type:"warning",children:[(0,o.jsx)(n.p,{children:"If you are upgrading to 5.3.0+, run the following commands based on your current version:"}),(0,o.jsxs)(s,{groupId:"versions",children:[(0,o.jsx)(r,{value:"Version 5.2.0",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc delete clusterrole neuvector-binding-nvsecurityrules neuvector-binding-nvadmissioncontrolsecurityrules neuvector-binding-nvdlpsecurityrules neuvector-binding-nvwafsecurityrules\n"})})}),(0,o.jsx)(r,{value:"Versions prior to 5.2.0",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc delete clusterrolebinding neuvector-binding-app neuvector-binding-rbac neuvector-binding-admission neuvector-binding-customresourcedefinition neuvector-binding-nvsecurityrules neuvector-binding-view neuvector-binding-nvwafsecurityrules neuvector-binding-nvadmissioncontrolsecurityrules neuvector-binding-nvdlpsecurityrules neuvector-binding-co\noc delete rolebinding neuvector-admin -n neuvector\n"})})})]})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc create clusterrole neuvector-binding-app --verb=get,list,watch,update --resource=nodes,pods,services,namespaces\noc create clusterrole neuvector-binding-rbac --verb=get,list,watch --resource=rolebindings.rbac.authorization.k8s.io,roles.rbac.authorization.k8s.io,clusterrolebindings.rbac.authorization.k8s.io,clusterroles.rbac.authorization.k8s.io,imagestreams.image.openshift.io\noc adm policy add-cluster-role-to-user neuvector-binding-app system:serviceaccount:neuvector:controller\noc adm policy add-cluster-role-to-user neuvector-binding-rbac system:serviceaccount:neuvector:controller\noc create clusterrole neuvector-binding-admission --verb=get,list,watch,create,update,delete --resource=validatingwebhookconfigurations,mutatingwebhookconfigurations\noc adm policy add-cluster-role-to-user neuvector-binding-admission system:serviceaccount:neuvector:controller\noc create clusterrole neuvector-binding-customresourcedefinition --verb=watch,create,get,update --resource=customresourcedefinitions\noc adm policy add-cluster-role-to-user neuvector-binding-customresourcedefinition system:serviceaccount:neuvector:controller\noc create clusterrole neuvector-binding-nvsecurityrules --verb=get,list,delete --resource=nvsecurityrules,nvclustersecurityrules\noc create clusterrole neuvector-binding-nvadmissioncontrolsecurityrules --verb=get,list,delete --resource=nvadmissioncontrolsecurityrules\noc create clusterrole neuvector-binding-nvdlpsecurityrules --verb=get,list,delete --resource=nvdlpsecurityrules\noc create clusterrole neuvector-binding-nvwafsecurityrules --verb=get,list,delete --resource=nvwafsecurityrules\noc adm policy add-cluster-role-to-user neuvector-binding-nvsecurityrules system:serviceaccount:neuvector:controller\noc adm policy add-cluster-role-to-user view system:serviceaccount:neuvector:controller --rolebinding-name=neuvector-binding-view\noc adm policy add-cluster-role-to-user neuvector-binding-nvwafsecurityrules system:serviceaccount:neuvector:controller\noc adm policy add-cluster-role-to-user neuvector-binding-nvadmissioncontrolsecurityrules system:serviceaccount:neuvector:controller\noc adm policy add-cluster-role-to-user neuvector-binding-nvdlpsecurityrules system:serviceaccount:neuvector:controller\noc create role neuvector-binding-scanner --verb=get,patch,update,watch --resource=deployments -n neuvector\noc adm policy add-role-to-user neuvector-binding-scanner system:serviceaccount:neuvector:updater system:serviceaccount:neuvector:controller -n neuvector --role-namespace neuvector\noc create clusterrole neuvector-binding-co --verb=get,list --resource=clusteroperators\noc adm policy add-cluster-role-to-user neuvector-binding-co system:serviceaccount:neuvector:enforcer system:serviceaccount:neuvector:controller\noc create role neuvector-binding-secret --verb=get --resource=secrets -n neuvector\noc adm policy add-role-to-user neuvector-binding-secret system:serviceaccount:neuvector:controller -n neuvector --role-namespace neuvector\noc create clusterrole neuvector-binding-nvcomplianceprofiles --verb=get,list,delete --resource=nvcomplianceprofiles\noc create clusterrolebinding neuvector-binding-nvcomplianceprofiles --clusterrole=neuvector-binding-nvcomplianceprofiles --serviceaccount=neuvector:controller\noc create clusterrole neuvector-binding-nvvulnerabilityprofiles --verb=get,list,delete --resource=nvvulnerabilityprofiles\noc create clusterrolebinding neuvector-binding-nvvulnerabilityprofiles --clusterrole=neuvector-binding-nvvulnerabilityprofiles --serviceaccount=neuvector:controller\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"8",children:["\n",(0,o.jsx)(n.li,{children:"Run the following command to check if the neuvector/controller, neuvector/enforcer and neuvector/updater service accounts are added successfully."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc get ClusterRoleBinding neuvector-binding-app neuvector-binding-rbac neuvector-binding-admission neuvector-binding-customresourcedefinition neuvector-binding-nvsecurityrules neuvector-binding-view neuvector-binding-nvwafsecurityrules neuvector-binding-nvadmissioncontrolsecurityrules neuvector-binding-nvdlpsecurityrules neuvector-binding-co -o wide\n"})}),"\n",(0,o.jsx)(n.p,{children:"Sample output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"NAME                                                ROLE                                                            AGE   USERS   GROUPS   SERVICEACCOUNTS\nneuvector-binding-app                               ClusterRole/neuvector-binding-app                               56d                    neuvector/controller\nneuvector-binding-rbac                              ClusterRole/neuvector-binding-rbac                              34d                    neuvector/controller\nneuvector-binding-admission                         ClusterRole/neuvector-binding-admission                         72d                    neuvector/controller\nneuvector-binding-customresourcedefinition          ClusterRole/neuvector-binding-customresourcedefinition          72d                    neuvector/controller\nneuvector-binding-nvsecurityrules                   ClusterRole/neuvector-binding-nvsecurityrules                   72d                    neuvector/controller\nneuvector-binding-view                              ClusterRole/view                                                72d                    neuvector/controller\nneuvector-binding-nvwafsecurityrules                ClusterRole/neuvector-binding-nvwafsecurityrules                72d                    neuvector/controller\nneuvector-binding-nvadmissioncontrolsecurityrules   ClusterRole/neuvector-binding-nvadmissioncontrolsecurityrules   72d                    neuvector/controller\nneuvector-binding-nvdlpsecurityrules                ClusterRole/neuvector-binding-nvdlpsecurityrules                72d                    neuvector/controller\nneuvector-binding-co                                ClusterRole/neuvector-binding-co                                72d                    neuvector/enforcer, neuvector/controller\n"})}),"\n",(0,o.jsx)(n.p,{children:"And this command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc get RoleBinding neuvector-binding-scanner -n neuvector -o wide\n"})}),"\n",(0,o.jsx)(n.p,{children:"Sample output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"NAME                        ROLE                             AGE   USERS   GROUPS   SERVICEACCOUNTS\nneuvector-binding-scanner   Role/neuvector-binding-scanner   70d                    neuvector/updater, neuvector/controller\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"9",children:["\n",(0,o.jsxs)(n.li,{children:["(",(0,o.jsx)("strong",{children:"Optional"}),") Create the Federation Master and/or Remote Multi-Cluster Management Services. If you plan to use the multi-cluster management functions in NeuVector, one cluster must have the Federation Master service deployed, and each remote cluster must have the Federation Worker service. For flexibility, you may choose to deploy both Master and Worker services on each cluster so any cluster can be a master or remote."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Federated Management Services"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n  name: neuvector-service-controller-fed-master\n  namespace: neuvector\nspec:\n  ports:\n  - port: 11443\n    name: fed\n    protocol: TCP\n  type: NodePort\n  selector:\n    app: neuvector-controller-pod\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: neuvector-service-controller-fed-worker\n  namespace: neuvector\nspec:\n  ports:\n  - port: 10443\n    name: fed\n    protocol: TCP\n  type: NodePort\n  selector:\n    app: neuvector-controller-pod\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then create the appropriate service(s):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc create -f nv_master_worker.yaml\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"10",children:["\n",(0,o.jsx)(n.li,{children:"Create the neuvector services and pods based on the sample yamls below. Important! Replace the <version> tags for the manager, controller and enforcer image references in the yaml file. Also make any other modifications required for your deployment environment."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc create -f <compose file>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["That's it! You should be able to connect to the NeuVector console and login with admin",":admin",", e.g. https://<public-ip>:8443"]}),"\n",(0,o.jsx)(n.p,{children:"To see how to access the console for the neuvector-webui service:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc get services -n neuvector\n"})}),"\n",(0,o.jsx)(n.p,{children:"If you have created your own namespace instead of using \u201cneuvector\u201d, replace all instances of \u201cnamespace: neuvector\u201d and other namespace references with your namespace in the sample yaml files below."}),"\n",(0,o.jsx)("strong",{children:"OpenShift 4.6+ with CRI-O run-time"}),"\n",(0,o.jsx)(n.p,{children:"The name of your default OpenShift registry might have changed from docker-registry to openshift-image-registry. You may need to change the image registry for the manager, controller, and enforcer in the sample yaml."}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"Type NodePort is used for the fed-master and fed-worker services instead of LoadBalancer. You may need to adjust for your deployment."})}),"\n",(0,o.jsxs)(n.p,{children:["If using the CRI-O run-time, see this ",(0,o.jsx)(n.a,{href:"https://raw.githubusercontent.com/neuvector/manifests/main/kubernetes/5.3.0/neuvector-crio-oc.yaml",children:"CRI-O sample"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Master Node Taints and Tolerations"})}),"\n",(0,o.jsx)(n.p,{children:"All taint info must match to schedule Enforcers on nodes. To check the taint info on a node (e.g. Master):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"$ oc get node taintnodename -o yaml\n"})}),"\n",(0,o.jsx)(n.p,{children:"Sample output:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"spec:\n  taints:\n  - effect: NoSchedule\n    key: node-role.kubernetes.io/master\n  # there may be an extra info for taint as below\n  - effect: NoSchedule\n    key: mykey\n    value: myvalue\n"})}),"\n",(0,o.jsx)(n.p,{children:"If there is additional taints as above, add these to the sample yaml tolerations section:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"spec:\n  template:\n    spec:\n      tolerations:\n        - effect: NoSchedule\n          key: node-role.kubernetes.io/master\n        - effect: NoSchedule\n          key: node-role.kubernetes.io/control-plane\n        # if there is an extra info for taints as above, please add it here. This is required to match all the taint info defined on the taint node. Otherwise, the Enforcer won't deploy on the taint node\n        - effect: NoSchedule\n          key: mykey\n          value: myvalue\n"})}),"\n",(0,o.jsx)(n.h3,{id:"using-node-labels-for-manager-and-controller-nodes",children:"Using Node Labels for Manager and Controller Nodes"}),"\n",(0,o.jsxs)(n.p,{children:["To control which nodes the Manager and Controller are deployed on, label each node. Replace ",(0,o.jsx)(n.code,{children:"<nodename>"})," with the appropriate node name."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc label nodes <nodename> nvcontroller=true\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then add a nodeSelector to the yaml file for the Manager and Controller deployment sections. For example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'          - mountPath: /host/cgroup\n              name: cgroup-vol\n              readOnly: true\n      nodeSelector:\n        nvcontroller: "true"\n      restartPolicy: Always\n'})}),"\n",(0,o.jsx)(n.p,{children:"To prevent the enforcer from being deployed on a controller node, if it is a dedicated management node (without application containers to be monitored), add a nodeAffinity to the Enforcer yaml section. For example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'app: neuvector-enforcer-pod\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n              - matchExpressions:\n                - key: nvcontroller\n                  operator: NotIn\n                  values: ["true"]\n      imagePullSecrets:\n'})}),"\n",(0,o.jsx)(n.h3,{id:"updating-the-cve-database-on-openshift-deployments",children:"Updating the CVE Database on OpenShift Deployments"}),"\n",(0,o.jsx)(n.p,{children:"The latest scanner image always contains the most recent CVE database update from NeuVector. For this reason, a version tag is not recommended when pulling the image. However, updating the CVE database requires regular pulling of the latest scanner image so the updater cron job can redeploy the scanner(s).  The samples above assume NeuVector images are pulled, tagged and pushed to a local OpenShift registry. Deployment is then from this registry instead of directly from neuvector (or the legacy NeuVector registry on docker hub)."}),"\n",(0,o.jsx)(n.p,{children:"To regularly update the CVE database, we recommend a script/cron job be created to pull the latest NeuVector scanner image and perform the tagging and pushing steps to the local registry. This will ensure the CVE database is being updated regularly and images and containers are being scanned for new vulnerabilities."}),"\n",(0,o.jsx)(n.h3,{id:"rolling-updates",children:"Rolling Updates"}),"\n",(0,o.jsx)(n.p,{children:"Orchestration tools such as Kubernetes, RedHat OpenShift, and Rancher support rolling updates with configurable policies. You can use this feature to update the NeuVector containers. The most important will be to ensure that there is at least one Allinone/Controller running so that policies, logs, and connection data is not lost. Make sure that there is a minimum of 30 seconds between container updates so that a new leader can be elected and the data synchronized between controllers."}),"\n",(0,o.jsx)(n.p,{children:"Before starting the rolling updates, please pull and tag the NeuVector containers the same way as in the beginning of this page. You can pull the latest without a version number, but to trigger the rolling update you\u2019ll need to tag the image with a version."}),"\n",(0,o.jsx)(n.p,{children:"For example, for the controller (latest):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"docker pull neuvector/controller\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then to tag/push, if latest version is 2.0.1, same as step 3 at the top of this page:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"docker login -u <user_name> -p `oc whoami -t` docker-registry.default.svc:5000\ndocker tag neuvector/controller docker-registry.default.svc:5000/neuvector/controller:2.0.1\ndocker push docker-registry.default.svc:5000/neuvector/controller:2.0.1\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can now update your yaml file with these new versions and \u2018apply\u2019, or use the \u2018oc set image ...\u2019 command to trigger the rolling update. Please see the Kubernetes rolling update samples in this Production section to how to launch and monitor rolling updates of the NeuVector containers."}),"\n",(0,o.jsx)(n.p,{children:"The provided sample deployment yamls already configure the rolling update policy. If you are updating via the NeuVector Helm chart, please pull the latest chart to properly configure new features such as admission control, and delete the old cluster role and cluster role binding for NeuVector."}),"\n",(0,o.jsx)(n.h3,{id:"enabling-the-rest-api",children:"Enabling the REST API"}),"\n",(0,o.jsx)(n.p,{children:"To enable the rest API, port 10443 must be configured as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Service\nmetadata:\n  name: neuvector-service-controller\n  namespace: neuvector\nspec:\n  ports:\n    - port: 10443\n      name: controller\n      protocol: TCP\n  type: NodePort\n  selector:\n    app: neuvector-controller-pod\n"})}),"\n",(0,o.jsx)(n.h3,{id:"enabledisable-scheduling-on-the-master-node",children:"Enable/Disable Scheduling on the Master Node"}),"\n",(0,o.jsx)(n.p,{children:"The following commands can be used to enable/disable the scheduling on the master node."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc adm manage-node nodename --schedulable\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"oc adm manage-node nodename --schedulable=false\n"})}),"\n",(0,o.jsx)(n.h3,{id:"openshift-deployment-in-non-privileged-mode",children:"OpenShift Deployment in Non-Privileged Mode"}),"\n",(0,o.jsx)(n.p,{children:"The following instructions can be used to deploy NeuVector without using privileged mode containers. The controller is already in non-privileged mode and the enforcer deployment should be changed, which is shown in the excerpted snippets below."}),"\n",(0,o.jsx)(n.p,{children:"Enforcer:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"spec:\n  template:\n    metadata:\n      annotations:\n        container.apparmor.security.beta.kubernetes.io/neuvector-enforcer-pod: unconfined\n      # this line below is required to be added if k8s version is pre-v1.19\n      # container.seccomp.security.alpha.kubernetes.io/neuvector-enforcer-pod: unconfined\n    spec:\n      containers:\n          securityContext:\n            # openshift\n            seLinuxOptions:\n              type: unconfined_t\n            # the following two lines are required for k8s v1.19+. pls comment out both lines if version is pre-1.19. Otherwise, a validating data error message will show\n            seccompProfile:\n              type: Unconfined\n            capabilities:\n              add:\n              - SYS_ADMIN\n              - NET_ADMIN\n              - SYS_PTRACE\n              - IPC_LOCK\n              - NET_RAW\n              - SYS_CHROOT\n              - MKNOD\n              - AUDIT_WRITE\n              - SETFCAP\n"})}),"\n",(0,o.jsx)(n.p,{children:"The following sample is a complete deployment reference using the cri-o run-time. For other run-times please make the appropriate changes to the volumes/volume mounts for the crio.sock."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Service\nmetadata:\n  name: neuvector-svc-crd-webhook\n  namespace: neuvector\nspec:\n  ports:\n  - port: 443\n    targetPort: 30443\n    protocol: TCP\n    name: crd-webhook\n  type: ClusterIP\n  selector:\n    app: neuvector-controller-pod\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: neuvector-svc-admission-webhook\n  namespace: neuvector\nspec:\n  ports:\n  - port: 443\n    targetPort: 20443\n    protocol: TCP\n    name: admission-webhook\n  type: ClusterIP\n  selector:\n    app: neuvector-controller-pod\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: neuvector-service-webui\n  namespace: neuvector\nspec:\n  ports:\n    - port: 8443\n      name: manager\n      protocol: TCP\n  type: ClusterIP\n  selector:\n    app: neuvector-manager-pod\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: neuvector-svc-controller\n  namespace: neuvector\nspec:\n  ports:\n  - port: 18300\n    protocol: "TCP"\n    name: "cluster-tcp-18300"\n  - port: 18301\n    protocol: "TCP"\n    name: "cluster-tcp-18301"\n  - port: 18301\n    protocol: "UDP"\n    name: "cluster-udp-18301"\n  clusterIP: None\n  selector:\n    app: neuvector-controller-pod\n\n---\n\napiVersion: route.openshift.io/v1\nkind: Route\nmetadata:\n  name: neuvector-route-webui\n  namespace: neuvector\nspec:\n  to:\n    kind: Service\n    name: neuvector-service-webui\n  port:\n    targetPort: manager\n  tls:\n    termination: passthrough\n\n---\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: neuvector-manager-pod\n  namespace: neuvector\nspec:\n  selector:\n    matchLabels:\n      app: neuvector-manager-pod\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: neuvector-manager-pod\n    spec:\n      serviceAccountName: basic\n      serviceAccount: basic\n      containers:\n        - name: neuvector-manager-pod\n          image: image-registry.openshift-image-registry.svc:5000/neuvector/manager:<version>\n          env:\n            - name: CTRL_SERVER_IP\n              value: neuvector-svc-controller.neuvector\n      restartPolicy: Always\n\n---\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: neuvector-controller-pod\n  namespace: neuvector\nspec:\n  selector:\n    matchLabels:\n      app: neuvector-controller-pod\n  minReadySeconds: 60\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: neuvector-controller-pod\n    spec:\n      affinity:\n        podAntiAffinity:\n          preferredDuringSchedulingIgnoredDuringExecution:\n          - weight: 100\n            podAffinityTerm:\n              labelSelector:\n                matchExpressions:\n                - key: app\n                  operator: In\n                  values:\n                  - neuvector-controller-pod\n              topologyKey: "kubernetes.io/hostname"\n      serviceAccountName: controller\n      serviceAccount: controller\n      containers:\n        - name: neuvector-controller-pod\n          image: image-registry.openshift-image-registry.svc:5000/neuvector/controller:<version>\n          securityContext:\n            runAsUser: 0\n          readinessProbe:\n            exec:\n              command:\n              - cat\n              - /tmp/ready\n            initialDelaySeconds: 5\n            periodSeconds: 5\n          env:\n            - name: CLUSTER_JOIN_ADDR\n              value: neuvector-svc-controller.neuvector\n            - name: CLUSTER_ADVERTISED_ADDR\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n            - name: CLUSTER_BIND_ADDR\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n            # - name: CTRL_PERSIST_CONFIG\n            #   value: "1"\n          volumeMounts:\n            # - mountPath: /var/neuvector\n            #   name: nv-share\n            #   readOnly: false\n            - mountPath: /etc/config\n              name: config-volume\n              readOnly: true\n      terminationGracePeriodSeconds: 300\n      restartPolicy: Always\n      volumes:\n        # - name: nv-share\n        #   persistentVolumeClaim:\n        #     claimName: neuvector-data\n        - name: config-volume\n          projected:\n            sources:\n              - configMap:\n                  name: neuvector-init\n                  optional: true\n              - secret:\n                  name: neuvector-init\n                  optional: true\n              - secret:\n                  name: neuvector-secret\n                  optional: true\n\n---\n\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: neuvector-enforcer-pod\n  namespace: neuvector\nspec:\n  selector:\n    matchLabels:\n      app: neuvector-enforcer-pod\n  updateStrategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: neuvector-enforcer-pod\n      annotations:\n        container.apparmor.security.beta.kubernetes.io/neuvector-enforcer-pod: unconfined\n      # Add the following for pre-v1.19\n      # container.seccomp.security.alpha.kubernetes.io/neuvector-enforcer-pod: unconfined\n    spec:\n      tolerations:\n        - effect: NoSchedule\n          key: node-role.kubernetes.io/master\n        - effect: NoSchedule\n          key: node-role.kubernetes.io/control-plane\n      hostPID: true\n      serviceAccountName: enforcer\n      serviceAccount: enforcer\n      containers:\n        - name: neuvector-enforcer-pod\n          image: image-registry.openshift-image-registry.svc:5000/neuvector/enforcer:<version>\n          securityContext:\n            # openshift\n            seLinuxOptions:\n              type: unconfined_t\n            # the following two lines are required for k8s v1.19+. pls comment out both lines if version is pre-1.19. Otherwise, a validating data error message will show\n            seccompProfile:\n              type: Unconfined\n            capabilities:\n              add:\n              - SYS_ADMIN\n              - NET_ADMIN\n              - SYS_PTRACE\n              - IPC_LOCK\n              - NET_RAW\n              - SYS_CHROOT\n              - MKNOD\n              - AUDIT_WRITE\n              - SETFCAP\n          env:\n            - name: CLUSTER_JOIN_ADDR\n              value: neuvector-svc-controller.neuvector\n            - name: CLUSTER_ADVERTISED_ADDR\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n            - name: CLUSTER_BIND_ADDR\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n          volumeMounts:\n            - mountPath: /lib/modules\n              name: modules-vol\n              readOnly: true\n            # - mountPath: /run/runtime.sock\n            #   name: runtime-sock\n            #   readOnly: true\n            # - mountPath: /host/proc\n            #   name: proc-vol\n            #   readOnly: true\n            # - mountPath: /host/cgroup\n            #   name: cgroup-vol\n            #   readOnly: true\n            - mountPath: /var/nv_debug\n              name: nv-debug\n              readOnly: false\n      terminationGracePeriodSeconds: 1200\n      restartPolicy: Always\n      volumes:\n        - name: modules-vol\n          hostPath:\n            path: /lib/modules\n        # - name: runtime-sock\n        #   hostPath:\n        #     path: /var/run/crio/crio.sock\n        # - name: proc-vol\n        #   hostPath:\n        #     path: /proc\n        # - name: cgroup-vol\n        #   hostPath:\n        #     path: /sys/fs/cgroup\n        - name: nv-debug\n          hostPath:\n            path: /var/nv_debug\n\n---\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: neuvector-scanner-pod\n  namespace: neuvector\nspec:\n  selector:\n    matchLabels:\n      app: neuvector-scanner-pod\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: neuvector-scanner-pod\n    spec:\n      serviceAccountName: scanner\n      serviceAccount: scanner\n      containers:\n        - name: neuvector-scanner-pod\n          image: image-registry.openshift-image-registry.svc:5000/neuvector/scanner:<version>\n          imagePullPolicy: Always\n          env:\n            - name: CLUSTER_JOIN_ADDR\n              value: neuvector-svc-controller.neuvector\n      restartPolicy: Always\n\n---\n\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: neuvector-updater-pod\n  namespace: neuvector\nspec:\n  schedule: "0 0 * * *"\n  jobTemplate:\n    spec:\n      template:\n        metadata:\n          labels:\n            app: neuvector-updater-pod\n        spec:\n          serviceAccountName: updater\n          serviceAccount: updater\n          containers:\n          - name: neuvector-updater-pod\n            image: image-registry.openshift-image-registry.svc:5000/neuvector/updater:<version>\n            imagePullPolicy: Always\n            command:\n            - /bin/sh\n            - -c\n            - TOKEN=`cat /var/run/secrets/kubernetes.io/serviceaccount/token`; /usr/bin/curl -kv -X PATCH -H "Authorization:Bearer $TOKEN" -H "Content-Type:application/strategic-merge-patch+json" -d \'{"spec":{"template":{"metadata":{"annotations":{"kubectl.kubernetes.io/restartedAt":"\'`date +%Y-%m-%dT%H:%M:%S%z`\'"}}}}}\' \'https://kubernetes.default/apis/apps/v1/namespaces/neuvector/deployments/neuvector-scanner-pod\'\n          restartPolicy: Never\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>a});var o=r(96540);const t={},s=o.createContext(t);function c(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);