"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8079],{97932:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>i});var r=t(85893),o=t(11151);const c={title:"Kubernetes (Allinone)",taxonomy:{category:"docs"},slug:"/special/kubernetes"},a=void 0,s={id:"special/kubernetes/kubernetes",title:"Kubernetes (Allinone)",description:"Deploy Using Kubernetes",source:"@site/versioned_docs/version-5.2/13.special/02.kubernetes/02.kubernetes.md",sourceDirName:"13.special/02.kubernetes",slug:"/special/kubernetes",permalink:"/neuvector-docs/5.2/special/kubernetes",draft:!1,unlisted:!1,editUrl:"https://github.com/neuvector/docs/edit/main/versioned_docs/version-5.2/13.special/02.kubernetes/02.kubernetes.md",tags:[],version:"5.2",sidebarPosition:2,frontMatter:{title:"Kubernetes (Allinone)",taxonomy:{category:"docs"},slug:"/special/kubernetes"},sidebar:"tutorialSidebar",previous:{title:"General Guidelines",permalink:"/neuvector-docs/5.2/special/general"},next:{title:"OpenShift (Allinone)",permalink:"/neuvector-docs/5.2/special/openshift"}},l={},i=[{value:"Deploy Using Kubernetes",id:"deploy-using-kubernetes",level:3},{value:"Sample Files",id:"sample-files",level:4}];function u(e){const n={admonition:"admonition",code:"code",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"deploy-using-kubernetes",children:"Deploy Using Kubernetes"}),"\n",(0,r.jsx)(n.p,{children:"NeuVector requires and supports Kubernetes network plug-ins such as flannel, weave, or calico."}),"\n",(0,r.jsx)(n.p,{children:"You can use Kubernetes to deploy the allinone and enforcer and make sure that all new nodes have an enforcer deployed. Sample files follow the commands below. There is a separate section for OpenShift instructions, and Docker EE on Kubernetes has some special steps described in the Docker section. For a more production ready deployment using multiple controllers, see the Production Deployment section."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"This sample section does not include creating the NeuVector Customer Resource Definition (CRD). Please see Deploying NeuVector for the CRD samples."})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Create the NeuVector namespace and the required service accounts"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl create namespace neuvector\nkubectl create sa controller -n neuvector\nkubectl create sa enforcer -n neuvector\nkubectl create sa basic -n neuvector\nkubectl create sa updater -n neuvector\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Add read permission to access the kubernetes API. IMPORTANT: The standard NeuVector 5.2+ deployment uses least-privileged service accounts instead of the default. See below if upgrading to 5.2+ from a version prior to 5.2."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl create clusterrole neuvector-binding-app --verb=get,list,watch,update --resource=nodes,pods,services,namespaces\nkubectl create clusterrole neuvector-binding-rbac --verb=get,list,watch --resource=rolebindings.rbac.authorization.k8s.io,roles.rbac.authorization.k8s.io,clusterrolebindings.rbac.authorization.k8s.io,clusterroles.rbac.authorization.k8s.io\nkubectl create clusterrolebinding neuvector-binding-app --clusterrole=neuvector-binding-app --serviceaccount=neuvector:controller\nkubectl create clusterrolebinding neuvector-binding-rbac --clusterrole=neuvector-binding-rbac --serviceaccount=neuvector:controller\nkubectl create clusterrole neuvector-binding-admission --verb=get,list,watch,create,update,delete --resource=validatingwebhookconfigurations,mutatingwebhookconfigurations\nkubectl create clusterrolebinding neuvector-binding-admission --clusterrole=neuvector-binding-admission --serviceaccount=neuvector:controller\nkubectl create clusterrole neuvector-binding-customresourcedefinition --verb=watch,create,get,update --resource=customresourcedefinitions\nkubectl create clusterrolebinding neuvector-binding-customresourcedefinition --clusterrole=neuvector-binding-customresourcedefinition --serviceaccount=neuvector:controller\nkubectl create clusterrole neuvector-binding-nvsecurityrules --verb=list,delete --resource=nvsecurityrules,nvclustersecurityrules\nkubectl create clusterrolebinding neuvector-binding-nvsecurityrules --clusterrole=neuvector-binding-nvsecurityrules --serviceaccount=neuvector:controller\nkubectl create clusterrolebinding neuvector-binding-view --clusterrole=view --serviceaccount=neuvector:controller\nkubectl create clusterrole neuvector-binding-nvwafsecurityrules --verb=list,delete --resource=nvwafsecurityrules\nkubectl create clusterrolebinding neuvector-binding-nvwafsecurityrules --clusterrole=neuvector-binding-nvwafsecurityrules --serviceaccount=neuvector:controller\nkubectl create clusterrole neuvector-binding-nvadmissioncontrolsecurityrules --verb=list,delete --resource=nvadmissioncontrolsecurityrules\nkubectl create clusterrolebinding neuvector-binding-nvadmissioncontrolsecurityrules --clusterrole=neuvector-binding-nvadmissioncontrolsecurityrules --serviceaccount=neuvector:controller\nkubectl create clusterrole neuvector-binding-nvdlpsecurityrules --verb=list,delete --resource=nvdlpsecurityrules\nkubectl create clusterrolebinding neuvector-binding-nvdlpsecurityrules --clusterrole=neuvector-binding-nvdlpsecurityrules --serviceaccount=neuvector:controller\nkubectl create role neuvector-binding-scanner --verb=get,patch,update,watch --resource=deployments -n neuvector\nkubectl create rolebinding neuvector-binding-scanner --role=neuvector-binding-scanner --serviceaccount=neuvector:updater --serviceaccount=neuvector:controller -n neuvector\nkubectl create clusterrole neuvector-binding-csp-usages --verb=get,create,update,delete --resource=cspadapterusagerecords\nkubectl create clusterrolebinding neuvector-binding-csp-usages --clusterrole=neuvector-binding-csp-usages --serviceaccount=neuvector:controller\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"If upgrading NeuVector from a previous install, you may need to delete the old binding as follows:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl delete clusterrolebinding neuvector-binding\nkubectl delete clusterrole neuvector-binding\n"})})]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"If upgrading NeuVector from a previous install, you will need to delete the old binding before creating the new least-privileged bindings:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl delete clusterrolebinding neuvector-binding-app neuvector-binding-rbac neuvector-binding-admission neuvector-binding-customresourcedefinition neuvector-binding-nvsecurityrules neuvector-binding-view neuvector-binding-nvwafsecurityrules neuvector-binding-nvadmissioncontrolsecurityrules neuvector-binding-nvdlpsecurityrules\nkubectl delete rolebinding neuvector-admin -n neuvector\nkubectl create clusterrolebinding neuvector-binding-app --clusterrole=neuvector-binding-app --serviceaccount=neuvector:controller\nkubectl create clusterrolebinding neuvector-binding-rbac --clusterrole=neuvector-binding-rbac --serviceaccount=neuvector:controller\nkubectl create clusterrolebinding neuvector-binding-admission --clusterrole=neuvector-binding-admission --serviceaccount=neuvector:controller\nkubectl create clusterrolebinding neuvector-binding-customresourcedefinition --clusterrole=neuvector-binding-customresourcedefinition --serviceaccount=neuvector:controller\nkubectl create clusterrolebinding neuvector-binding-nvsecurityrules --clusterrole=neuvector-binding-nvsecurityrules --serviceaccount=neuvector:controller\nkubectl create clusterrolebinding neuvector-binding-view --clusterrole=view --serviceaccount=neuvector:controller\nkubectl create clusterrolebinding neuvector-binding-nvwafsecurityrules --clusterrole=neuvector-binding-nvwafsecurityrules --serviceaccount=neuvector:controller\nkubectl create clusterrolebinding neuvector-binding-nvadmissioncontrolsecurityrules --clusterrole=neuvector-binding-nvadmissioncontrolsecurityrules --serviceaccount=neuvector:controller\nkubectl create clusterrolebinding neuvector-binding-nvdlpsecurityrules --clusterrole=neuvector-binding-nvdlpsecurityrules --serviceaccount=neuvector:controller\nkubectl create role neuvector-binding-scanner --verb=get,patch,update,watch --resource=deployments -n neuvector\nkubectl create rolebinding neuvector-binding-scanner --role=neuvector-binding-scanner --serviceaccount=neuvector:updater --serviceaccount=neuvector:controller -n neuvector\nkubectl create clusterrole neuvector-binding-csp-usages --verb=get,create,update,delete --resource=cspadapterusagerecords\nkubectl create clusterrolebinding neuvector-binding-csp-usages --clusterrole=neuvector-binding-csp-usages --serviceaccount=neuvector:controller\n"})})]}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Run the following commands to check if the neuvector/controller and neuvector/updater service accounts are added successfully."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl get ClusterRoleBinding neuvector-binding-app neuvector-binding-rbac neuvector-binding-admission neuvector-binding-customresourcedefinition neuvector-binding-nvsecurityrules neuvector-binding-view neuvector-binding-nvwafsecurityrules neuvector-binding-nvadmissioncontrolsecurityrules neuvector-binding-nvdlpsecurityrules neuvector-binding-csp-usages -o wide\n"})}),"\n",(0,r.jsx)(n.p,{children:"Sample output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"NAME                                                ROLE                                                            AGE   USERS   GROUPS   SERVICEACCOUNTS\nneuvector-binding-app                               ClusterRole/neuvector-binding-app                               56d                    neuvector/controller\nneuvector-binding-rbac                              ClusterRole/neuvector-binding-rbac                              34d                    neuvector/controller\nneuvector-binding-admission                         ClusterRole/neuvector-binding-admission                         72d                    neuvector/controller\nneuvector-binding-customresourcedefinition          ClusterRole/neuvector-binding-customresourcedefinition          72d                    neuvector/controller\nneuvector-binding-nvsecurityrules                   ClusterRole/neuvector-binding-nvsecurityrules                   72d                    neuvector/controller\nneuvector-binding-view                              ClusterRole/view                                                72d                    neuvector/controller\nneuvector-binding-nvwafsecurityrules                ClusterRole/neuvector-binding-nvwafsecurityrules                72d                    neuvector/controller\nneuvector-binding-nvadmissioncontrolsecurityrules   ClusterRole/neuvector-binding-nvadmissioncontrolsecurityrules   72d                    neuvector/controller\nneuvector-binding-nvdlpsecurityrules                ClusterRole/neuvector-binding-nvdlpsecurityrules                72d                    neuvector/controller\nneuvector-binding-csp-usages                        ClusterRole/neuvector-binding-csp-usages                        24d                    neuvector/controller\n"})}),"\n",(0,r.jsx)(n.p,{children:"And this command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl get RoleBinding neuvector-binding-scanner -n neuvector -o wide\n"})}),"\n",(0,r.jsx)(n.p,{children:"Sample output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"NAME                        ROLE                             AGE   USERS   GROUPS   SERVICEACCOUNTS\nneuvector-binding-scanner   Role/neuvector-binding-scanner   70d                    neuvector/updater, neuvector/controller\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:"Add a nvallinone label on one of the worker nodes where the allinone will be deployed (note: by default Kubernetes will not schedule pods on the master)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl label nodes nodename nvallinone=true\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsx)(n.li,{children:"Create the neuvector services and pods using the sample below"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl create -f neuvector.yaml\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"The nodeport service specified in the neuvector.yaml file will open a random port on all kubernetes nodes for the NeuVector management web console port. If you want to see which port is open on the host nodes, please do the following commands."})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl get svc -n neuvector\n"})}),"\n",(0,r.jsx)(n.p,{children:"And you will see something like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"NAME                          CLUSTER-IP      EXTERNAL-IP   PORT(S)                                          AGE\nneuvector-service-webui     10.100.195.99     <nodes>       8443:30257/TCP                                   15m\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"If you are using the Allinone container for testing NeuVector, deploy only one Allinone for your cluster. Multiple Manager (Allinone) instances are not supported on Kubernetes. To test high availability for the Controller refer to the Deploying in Production section."})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"If using the containerd run-time, change the volumeMounts for controller and enforcer pods in the sample yamls from docker.sock to:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"            - mountPath: /run/containerd/containerd.sock\n              name: runtime-sock\n              readOnly: true\n"})}),(0,r.jsx)(n.p,{children:"And change the volumes from docker.sock to:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"       - name: runtime-sock\n          hostPath:\n            path: /run/containerd/containerd.sock\n"})})]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"PKS is field tested and requires enabling privileged containers to the plan/tile, and changing the yaml hostPath as follows for Allinone, Controller, Enforcer:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"          hostPath:\n            path: /var/vcap/sys/run/docker/docker.sock\n"})})]}),"\n",(0,r.jsx)(n.h4,{id:"sample-files",children:"Sample Files"}),"\n",(0,r.jsx)(n.p,{children:"The sample file below deploys an Allinone (Manager, Controller, Enforcer) on one labeled nodeSelector and Enforcers on all others. It creates a webui service for the console using NodePort, but use LoadBalancer if your environment supports it. It also adds a toleration to schedule an Enforcer on the Master Node, which should be updated if other taints on the master exist. This deployment does NOT save configuration to a persistent data store. See Deploying in Production section for persistent data configuration."}),"\n",(0,r.jsx)(n.p,{children:"If you have created your own namespace instead of using \u201cneuvector\u201d:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Replace all instances of \u201cnamespace: neuvector\u201d with your namespace."}),"\n",(0,r.jsx)(n.li,{children:"Search for all instances of \u201dneuvector-svc-allinone.neuvector\u201d in the files below. Then replace the \u201cneuvector\u201d (after the .) with the namespace you use."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Kubernetes v1.19+"}),": Here is the sample configuration file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Service\nmetadata:\n  name: neuvector-svc-crd-webhook\n  namespace: neuvector\nspec:\n  ports:\n  - port: 443\n    targetPort: 30443\n    protocol: TCP\n    name: crd-webhook\n  type: ClusterIP\n  selector:\n    app: neuvector-allinone-pod\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: neuvector-svc-admission-webhook\n  namespace: neuvector\nspec:\n  ports:\n  - port: 443\n    targetPort: 20443\n    protocol: TCP\n    name: admission-webhook\n  type: ClusterIP\n  selector:\n    app: neuvector-allinone-pod\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: neuvector-service-webui\n  namespace: neuvector\nspec:\n  ports:\n    - port: 8443\n      name: manager\n      protocol: TCP\n  type: LoadBalancer\n  selector:\n    app: neuvector-allinone-pod\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: neuvector-svc-allinone\n  namespace: neuvector\nspec:\n  ports:\n  - port: 18300\n    protocol: "TCP"\n    name: "cluster-tcp-18300"\n  - port: 18301\n    protocol: "TCP"\n    name: "cluster-tcp-18301"\n  - port: 18301\n    protocol: "UDP"\n    name: "cluster-udp-18301"\n  clusterIP: None\n  selector:\n    app: neuvector-allinone-pod\n\n---\n\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: neuvector-allinone-pod\n  namespace: neuvector\nspec:\n  selector:\n    matchLabels:\n      app: neuvector-allinone-pod\n  minReadySeconds: 60\n  updateStrategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxUnavailable: 1\n  template:\n    metadata:\n      labels:\n        app: neuvector-allinone-pod\n    spec:\n      hostPID: true\n      serviceAccountName: controller\n      serviceAccount: controller\n      containers:\n        - name: neuvector-allinone-pod\n          image: neuvector/allinone:5.2.0\n          securityContext:\n            privileged: true\n          readinessProbe:\n            exec:\n              command:\n              - cat\n              - /tmp/ready\n            initialDelaySeconds: 5\n            periodSeconds: 5\n          env:\n            - name: CLUSTER_JOIN_ADDR\n              value: neuvector-svc-allinone.neuvector\n            - name: CLUSTER_ADVERTISED_ADDR\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n            - name: CLUSTER_BIND_ADDR\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n          volumeMounts:\n            - mountPath: /lib/modules\n              name: modules-vol\n              readOnly: true\n            - mountPath: /var/neuvector\n              name: nv-share\n              readOnly: false\n            - mountPath: /run/containerd/containerd.sock\n              name: runtime-sock\n              readOnly: true\n            - mountPath: /host/proc\n              name: proc-vol\n              readOnly: true\n            - mountPath: /host/cgroup\n              name: cgroup-vol\n              readOnly: true\n            - mountPath: /etc/config\n              name: config-volume\n              readOnly: true\n      terminationGracePeriodSeconds: 1200\n      nodeSelector:\n        nvallinone: "true"\n      restartPolicy: Always\n      volumes:\n        - name: modules-vol\n          hostPath:\n            path: /lib/modules\n        - name: nv-share\n          hostPath:\n            path: /var/neuvector\n        - name: runtime-sock\n          hostPath:\n            path: /run/containerd/containerd.sock\n        - name: proc-vol\n          hostPath:\n            path: /proc\n        - name: cgroup-vol\n          hostPath:\n            path: /sys/fs/cgroup\n        - name: config-volume\n          projected:\n            sources:\n              - configMap:\n                  name: neuvector-init\n                  optional: true\n              - secret:\n                  name: neuvector-init\n                  optional: true\n\n---\n\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: neuvector-enforcer-pod\n  namespace: neuvector\nspec:\n  selector:\n    matchLabels:\n      app: neuvector-enforcer-pod\n  updateStrategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: neuvector-enforcer-pod\n    spec:\n      tolerations:\n        - effect: NoSchedule\n          key: node-role.kubernetes.io/master\n        - effect: NoSchedule\n          key: node-role.kubernetes.io/control-plane\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n              - matchExpressions:\n                - key: "nvallinone"\n                  operator: NotIn\n                  values: ["true"]\n      hostPID: true\n      serviceAccountName: enforcer\n      serviceAccount: enforcer\n      containers:\n        - name: neuvector-enforcer-pod\n          image: neuvector/enforcer:5.2.0\n          securityContext:\n            privileged: true\n          env:\n            - name: CLUSTER_JOIN_ADDR\n              value: neuvector-svc-allinone.neuvector\n            - name: CLUSTER_ADVERTISED_ADDR\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n            - name: CLUSTER_BIND_ADDR\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n          volumeMounts:\n            - mountPath: /lib/modules\n              name: modules-vol\n              readOnly: true\n            - mountPath: /run/containerd/containerd.sock\n              name: runtime-sock\n              readOnly: true\n            - mountPath: /host/proc\n              name: proc-vol\n              readOnly: true\n            - mountPath: /host/cgroup\n              name: cgroup-vol\n              readOnly: true\n      terminationGracePeriodSeconds: 1200\n      restartPolicy: Always\n      volumes:\n        - name: modules-vol\n          hostPath:\n            path: /lib/modules\n        - name: runtime-sock\n          hostPath:\n            path: /run/containerd/containerd.sock\n        - name: proc-vol\n          hostPath:\n            path: /proc\n        - name: cgroup-vol\n          hostPath:\n            path: /sys/fs/cgroup\n\n---\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: neuvector-scanner-pod\n  namespace: neuvector\nspec:\n  selector:\n    matchLabels:\n      app: neuvector-scanner-pod\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: neuvector-scanner-pod\n    spec:\n      serviceAccountName: basic\n      serviceAccount: basic\n      containers:\n        - name: neuvector-scanner-pod\n          image: neuvector/scanner:latest\n          imagePullPolicy: Always\n          env:\n            - name: CLUSTER_JOIN_ADDR\n              value: neuvector-svc-controller.neuvector\n      restartPolicy: Always\n\n---\n\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: neuvector-updater-pod\n  namespace: neuvector\nspec:\n  schedule: "0 0 * * *"\n  jobTemplate:\n    spec:\n      template:\n        metadata:\n          labels:\n            app: neuvector-updater-pod\n        spec:\n          serviceAccountName: updater\n          serviceAccount: updater\n          containers:\n          - name: neuvector-updater-pod\n            image: neuvector/updater:latest\n            imagePullPolicy: Always\n            command:\n            - /bin/sh\n            - -c\n            - TOKEN=`cat /var/run/secrets/kubernetes.io/serviceaccount/token`; /usr/bin/curl -kv -X PATCH -H "Authorization:Bearer $TOKEN" -H "Content-Type:application/strategic-merge-patch+json" -d \'{"spec":{"template":{"metadata":{"annotations":{"kubectl.kubernetes.io/restartedAt":"\'`date +%Y-%m-%dT%H:%M:%S%z`\'"}}}}}\' \'https://kubernetes.default/apis/apps/v1/namespaces/neuvector/deployments/neuvector-scanner-pod\'\n          restartPolicy: Never\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Kubernetes v1.6-1.18"}),": Here is the sample configuration file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: Service\nmetadata:\n  name: neuvector-svc-admission-webhook\n  namespace: neuvector\nspec:\n  ports:\n  - port: 443\n    targetPort: 20443\n    protocol: TCP\n    name: admission-webhook\n  type: ClusterIP\n  selector:\n    app: neuvector-allinone-pod\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: neuvector-service-webui\n  namespace: neuvector\nspec:\n  ports:\n    - port: 8443\n      name: manager\n      protocol: TCP\n  type: NodePort\n  selector:\n    app: neuvector-allinone-pod\n\n---\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: neuvector-svc-allinone\n  namespace: neuvector\nspec:\n  ports:\n  - port: 18300\n    protocol: "TCP"\n    name: "cluster-tcp-18300"\n  - port: 18301\n    protocol: "TCP"\n    name: "cluster-tcp-18301"\n  - port: 18301\n    protocol: "UDP"\n    name: "cluster-udp-18301"\n  clusterIP: None\n  selector:\n    app: neuvector-allinone-pod\n\n---\n\napiVersion: extensions/v1beta1\nkind: DaemonSet\nmetadata:\n  name: neuvector-allinone-pod\n  namespace: neuvector\nspec:\n  minReadySeconds: 60\n  updateStrategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxUnavailable: 1\n  template:\n    metadata:\n      labels:\n        app: neuvector-allinone-pod\n    spec:\n      hostPID: true\n      containers:\n        - name: neuvector-allinone-pod\n          image: neuvector/allinone:<version>\n          securityContext:\n            privileged: true\n          readinessProbe:\n            exec:\n              command:\n              - cat\n              - /tmp/ready\n            initialDelaySeconds: 5\n            periodSeconds: 5\n          env:\n            - name: CLUSTER_JOIN_ADDR\n              value: neuvector-svc-allinone.neuvector\n            - name: CLUSTER_ADVERTISED_ADDR\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n            - name: CLUSTER_BIND_ADDR\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n          volumeMounts:\n            - mountPath: /lib/modules\n              name: modules-vol\n              readOnly: true\n            - mountPath: /var/neuvector\n              name: nv-share\n              readOnly: false\n            - mountPath: /var/run/docker.sock\n              name: docker-sock\n              readOnly: true\n            - mountPath: /host/proc\n              name: proc-vol\n              readOnly: true\n            - mountPath: /host/cgroup\n              name: cgroup-vol\n              readOnly: true\n            - mountPath: /etc/config\n              name: config-volume\n              readOnly: true\n      terminationGracePeriodSeconds: 300\n      nodeSelector:\n        nvallinone: "true"\n      restartPolicy: Always\n      volumes:\n        - name: modules-vol\n          hostPath:\n            path: /lib/modules\n        - name: nv-share\n          hostPath:\n            path: /var/neuvector\n        - name: docker-sock\n          hostPath:\n            path: /var/run/docker.sock\n        - name: proc-vol\n          hostPath:\n            path: /proc\n        - name: cgroup-vol\n          hostPath:\n            path: /sys/fs/cgroup\n        - name: config-volume\n          configMap:\n            name: neuvector-init\n            optional: true\n\n---\n\napiVersion: extensions/v1beta1\nkind: DaemonSet\nmetadata:\n  name: neuvector-enforcer-pod\n  namespace: neuvector\nspec:\n  updateStrategy:\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: neuvector-enforcer-pod\n    spec:\n      tolerations:\n        - effect: NoSchedule\n          key: node-role.kubernetes.io/master\n        - effect: NoSchedule\n          key: node-role.kubernetes.io/control-plane\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n              - matchExpressions:\n                - key: "nvallinone"\n                  operator: NotIn\n                  values: ["true"]\n      hostPID: true\n      containers:\n        - name: neuvector-enforcer-pod\n          image: neuvector/enforcer:<version>\n          securityContext:\n            privileged: true\n          env:\n            - name: CLUSTER_JOIN_ADDR\n              value: neuvector-svc-allinone.neuvector\n            - name: CLUSTER_ADVERTISED_ADDR\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n            - name: CLUSTER_BIND_ADDR\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n          volumeMounts:\n            - mountPath: /lib/modules\n              name: modules-vol\n              readOnly: true\n            - mountPath: /var/run/docker.sock\n              name: docker-sock\n              readOnly: true\n            - mountPath: /host/proc\n              name: proc-vol\n              readOnly: true\n            - mountPath: /host/cgroup\n              name: cgroup-vol\n              readOnly: true\n      terminationGracePeriodSeconds: 1200\n      restartPolicy: Always\n      volumes:\n        - name: modules-vol\n          hostPath:\n            path: /lib/modules\n        - name: docker-sock\n          hostPath:\n            path: /var/run/docker.sock\n        - name: proc-vol\n          hostPath:\n            path: /proc\n        - name: cgroup-vol\n          hostPath:\n            path: /sys/fs/cgroup\n\n---\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: neuvector-scanner-pod\n  namespace: neuvector\nspec:\n  selector:\n    matchLabels:\n      app: neuvector-scanner-pod\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: neuvector-scanner-pod\n    spec:\n      containers:\n        - name: neuvector-scanner-pod\n          image: neuvector/scanner\n          imagePullPolicy: Always\n          env:\n            - name: CLUSTER_JOIN_ADDR\n              value: neuvector-svc-controller.neuvector\n      restartPolicy: Always\n\n---\n\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: neuvector-updater-pod\n  namespace: neuvector\nspec:\n  schedule: "0 0 * * *"\n  jobTemplate:\n    spec:\n      template:\n        metadata:\n          labels:\n            app: neuvector-updater-pod\n        spec:\n          containers:\n          - name: neuvector-updater-pod\n            image: neuvector/updater\n            imagePullPolicy: Always\n            command:\n            - /bin/sh\n            - -c\n            - TOKEN=`cat /var/run/secrets/kubernetes.io/serviceaccount/token`; /usr/bin/curl -kv -X PATCH -H "Authorization:Bearer $TOKEN" -H "Content-Type:application/strategic-merge-patch+json" -d \'{"spec":{"template":{"metadata":{"annotations":{"kubectl.kubernetes.io/restartedAt":"\'`date +%Y-%m-%dT%H:%M:%S%z`\'"}}}}}\' \'https://kubernetes.default/apis/apps/v1/namespaces/neuvector/deployments/neuvector-scanner-pod\'\n          restartPolicy: Never\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Master Node Taints and Tolerations"}),"\nAll taint info must match to schedule Enforcers on nodes. To check the taint info on a node (e.g. Master):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"kubectl get node taintnodename -o yaml\n"})}),"\n",(0,r.jsx)(n.p,{children:"Sample output:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"spec:\n  taints:\n  - effect: NoSchedule\n    key: node-role.kubernetes.io/master\n  # there may be an extra info for taint as below\n  - effect: NoSchedule\n    key: mykey\n    value: myvalue\n"})}),"\n",(0,r.jsx)(n.p,{children:"If there is additional taints as above, add these to the sample yaml tolerations section:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"spec:\n  template:\n    spec:\n      tolerations:\n        - effect: NoSchedule\n          key: node-role.kubernetes.io/master\n        - effect: NoSchedule\n          key: node-role.kubernetes.io/control-plane\n        # if there is an extra info for taints as above, please add it here. This is required to match all the taint info defined on the taint node. Otherwise, the Enforcer won't deploy on the taint node\n        - effect: NoSchedule\n          key: mykey\n          value: myvalue\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>a});var r=t(67294);const o={},c=r.createContext(o);function a(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);