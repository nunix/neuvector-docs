"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4790],{71478:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=t(74848),r=t(28453);const a={title:"Deploy Using ConfigMap",taxonomy:{category:"docs"},slug:"/deploying/production/configmap"},i=void 0,s={id:"deploying/production/configmap/configmap",title:"Deploy Using ConfigMap",description:"Kubernetes ConfigMap",source:"@site/docs/02.deploying/01.production/01.configmap/01.configmap.md",sourceDirName:"02.deploying/01.production/01.configmap",slug:"/deploying/production/configmap",permalink:"/next/deploying/production/configmap",draft:!1,unlisted:!1,editUrl:"https://github.com/neuvector/docs/edit/main/docs/02.deploying/01.production/01.configmap/01.configmap.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Deploy Using ConfigMap",taxonomy:{category:"docs"},slug:"/deploying/production/configmap"},sidebar:"tutorialSidebar",previous:{title:"Deploying NeuVector",permalink:"/next/deploying/production"},next:{title:"Deploy Using Operators",permalink:"/next/deploying/production/operators"}},l={},p=[{value:"Kubernetes ConfigMap",id:"kubernetes-configmap",level:3},{value:"Complete Sample NeuVector ConfigMap (initcfg.yaml)",id:"complete-sample-neuvector-configmap-initcfgyaml",level:4},{value:"Protect Sensitive Data Using a Secret",id:"protect-sensitive-data-using-a-secret",level:3},{value:"ConfigMaps and Persistent Storage",id:"configmaps-and-persistent-storage",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h3,{id:"kubernetes-configmap",children:"Kubernetes ConfigMap"}),"\n",(0,o.jsx)(n.p,{children:"NeuVector supports automated configuration using the Kubernetes ConfigMap feature. This enables deployment of NeuVector containers with the appropriate configurations, integrations, and other settings in an automated way."}),"\n",(0,o.jsx)(n.p,{children:"The 'always_reload: true' setting can be added in any ConfigMap yaml to force reload of that yaml every time the controller starts (version 4.3.2+). Otherwise, the ConfigMap will only be loaded at initial startup or after complete cluster restart (see persistent storage section below)."}),"\n",(0,o.jsx)(n.h4,{id:"complete-sample-neuvector-configmap-initcfgyaml",children:"Complete Sample NeuVector ConfigMap (initcfg.yaml)"}),"\n",(0,o.jsxs)(n.p,{children:["The latest ConfigMap can be found ",(0,o.jsx)(n.a,{href:"https://raw.githubusercontent.com/neuvector/manifests/main/kubernetes/5.3.0/initcfg.yaml",children:"here"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"The sample is also shown below. This contains all the settings available. Please remove the sections not needed and edit the sections needed. Note: If using configmap in a secret, see section below for formatting changes."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\ndata:\n  passwordprofileinitcfg.yaml: |\n    # Optional. true or false or empty string(false)\n    always_reload: false\n    active_profile_name: default\n    pwd_profiles:\n    # only default profile is supported.\n    - name: default\n      comment: default from configMap\n      min_len: 6\n      min_uppercase_count: 0\n      min_lowercase_count: 0\n      min_digit_count: 0\n      min_special_count: 0\n      enable_block_after_failed_login: false\n      block_after_failed_login_count: 0\n      block_minutes: 0\n      enable_password_expiration: false\n      password_expire_after_days: 0\n      enable_password_history: false\n      password_keep_history_count: 0\n      # Optional. value between 30 -- 3600  default 300\n      session_timeout: 300\n  roleinitcfg.yaml: |\n    # Optional. true or false or empty string(false)\n    always_reload: false\n    roles:\n    # Optional.\n    - Comment: test role\n    # Mandatory. name can have ^[a-zA-Z0-9]+[.:a-zA-Z0-9_-]*$\n      Name: testrole\n    # Mandatory\n      Permissions:\n        - id: config\n          read: true\n          write: true\n        - id: rt_scan\n          read: true\n          write: true\n        - id: reg_scan\n          read: true\n          write: true\n        - id: ci_scan\n          write: true\n        - id: rt_policy\n          read: true\n          write: true\n        - id: admctrl\n          read: true\n          write: true\n        - id: compliance\n          read: true\n          write: true\n        - id: audit_events\n          read: true\n        - id: security_events\n          read: true\n        - id: events\n          read: true\n        - id: authentication\n          read: true\n          write: true\n        - id: authorization\n          read: true\n          write: true\n  ldapinitcfg.yaml: |\n    # Optional. true or false or empty string(false)\n    always_reload: false\n    # Mandatory. OpenLDAP or MicrosoftAD\n    directory: OpenLDAP\n    # Mandatory.\n    Hostname: 1.2.3.4\n    # Optional. the default value is 389\n    Port: 389\n    # Optional true or false or empty string(false)\n    SSL: false\n    # Mandatory.\n    base_dn: cn=admin,dc=example,dc=org\n    # Optional.\n    bind_dn: dc=example,dc=org\n    # Optional.\n    bind_password: password\n    # Optional. empty string(memberUid for openldap or member for windows ad)\n    group_member_attr: \n    # Optional. empty string(cn for openldap or sAMAccountName for windows ad)\n    username_attr: \n    # Optional. true or false or empty string(false)\n    Enable: false\n    # Optional. admin or reader or empty string(none)\n    Default_Role: admin\n    group_mapped_roles:\n      - group: admin1\n        global_role: admin\n      - group: reader1\n        global_role: reader\n      - group: cipos1\n        global_role: ciops\n      - group: admin2\n        global_role: admin\n      - group: reader2\n        global_role: reader\n      - group: ciops2\n        global_role: ciops\n      - group: ns\n        global_role:\n        role_domains:\n          testrole:\n            - ns2-ciops1\n            - ns2-ciops2\n          reader:\n            - ns2-reader1\n            - ns2-reader2\n          admin:\n            - ns2-admin1\n            - ns2-admin2\n      - group: custom\n        global_role: testrole\n        role_domains:\n          ciops:\n            - custom-ciops1\n            - custom-ciops2\n          reader:\n            - custom-reader1\n            - custom-reader2\n          admin:\n            - custom-admin1\n            - custom-admin2\n  oidcinitcfg.yaml: |\n    # Optional. true or false or empty string(false)\n    always_reload: false\n    # Mandatory\n    Issuer: https://...\n    # Mandatory\n    Client_ID: f53c56ec...\n    # Mandatory\n    Client_Secret: AyAixE3...\n    # Optional. empty or string(group filter info)\n    GroupClaim:  \n    # Optional. empty string(openid,profile,email)\n    Scopes:\n      - openid\n      - profile\n      - email\n    # Optional. true or false or empty string(false)\n    Enable: false\n    # Optional. admin or reader or empty string(none)\n    Default_Role: admin\n    group_mapped_roles:\n      - group: admin1\n        global_role: admin\n      - group: reader1\n        global_role: reader\n      - group: cipos1\n        global_role: ciops\n      - group: admin2\n        global_role: admin\n      - group: reader2\n        global_role: reader\n      - group: ciops2\n        global_role: ciops\n      - group: ns\n        global_role:\n        role_domains:\n          testrole:\n            - ns2-ciops1\n            - ns2-ciops2\n          reader:\n            - ns2-reader1\n            - ns2-reader2\n          admin:\n            - ns2-admin1\n            - ns2-admin2\n      - group: custom\n        global_role: testrole\n        role_domains:\n          ciops:\n            - custom-ciops1\n            - custom-ciops2\n          reader:\n            - custom-reader1\n            - custom-reader2\n          admin:\n            - custom-admin1\n            - custom-admin2\n    group_claim: groups\n  samlinitcfg.yaml: |\n    # Optional. true or false or empty string(false)\n    always_reload: false\n    # Mandatory\n    SSO_URL: https://...\n    # Mandatory\n    Issuer: https://...\n    # Mandatory\n    X509_Cert: |\n      -----BEGIN CERTIFICATE-----\n      MIIC8DCCAdigAwIBAgIQSMNDFv5HI7RPgF0uHW8YJDANBgkqhkiG9w0BAQsFADA0MTIwMAYDVQQD\n      ...\n      -----END CERTIFICATE-----\n    x509_cert_extra:\n      - |\n        -----BEGIN CERTIFICATE-----\n        MIIC8DCCAdigAwIBAgIQSMNDFv5HI7RPgF0uHW8YJDANBgkqhkiG9w0BAQsFADA0MTIwMAYDVQQD\n        ...\n        -----END CERTIFICATE-----\n    # Optional. empty or string(group filter info)\n    GroupClaim:  \n    # Optional. true or false or empty string(false)\n    Enable: false\n    # Optional. admin or reader or empty string(none)\n    Default_Role: admin\n    group_mapped_roles:\n      - group: admin1\n        global_role: admin\n      - group: reader1\n        global_role: reader\n      - group: cipos1\n        global_role: ciops\n      - group: admin2\n        global_role: admin\n      - group: reader2\n        global_role: reader\n      - group: ciops2\n        global_role: ciops\n      - group: ns\n        global_role:\n        role_domains:\n          testrole:\n            - ns2-ciops1\n            - ns2-ciops2\n          reader:\n            - ns2-reader1\n            - ns2-reader2\n          admin:\n            - ns2-admin1\n            - ns2-admin2\n      - group: custom\n        global_role: testrole\n        role_domains:\n          ciops:\n            - custom-ciops1\n            - custom-ciops2\n          reader:\n            - custom-reader1\n            - custom-reader2\n          admin:\n            - custom-admin1\n            - custom-admin2\n    group_claim: groups\n  sysinitcfg.yaml: |\n    # Optional. true or false or empty string(false)\n    always_reload: false\n    # Optional. Choose between  Discover or Monitor or Protect or empty string(Discover)\n    New_Service_Policy_Mode: Discover\n    # Optional. zero-drift or basic or empty string(zero-drift)\n    New_Service_Profile_Baseline: zero-drift\n    # Optional. input valid ipv4 address or empty string\n    Syslog_ip: 1.2.3.4\n    # Optional. input 17, 6 or 66 here for udp, tcp, tcp+tls or empty string(17)\n    Syslog_IP_Proto: 17\n    # Optional. it is required when Syslog_IP_Proto is 66 only\n    Syslog_Server_Cert: |\n      -----BEGIN CERTIFICATE-----\n      MIIC8DCCAdigAwIBAgIQSMNDFv5HI7RPgF0uHW8YJDANBgkqhkiG9w0BAQsFADA0MTIwMAYDVQQD\n      ...\n      -----END CERTIFICATE-----\n    # Optional. empty string(514)\n    Syslog_Port: 514\n    # Optional. chose between Alert/Critical/Error/Warning/Notice/Info/Debug or empty string(Info)\n    Syslog_Level: Info\n    # Optional. true or false or empty string(false)\n    Syslog_status: false\n    Syslog_Categories:\n    # Optional. can chose multiple between event/security-event/audit or empty string\n      - event\n      - security-event\n      - audit\n    Syslog_in_json: \n    # Optional. true, false, empty, unconfigured.\n    #  true = In Json: checkbox enabled from Settings > Configuration > Syslog\n    #  false, empty, unconfigured = In Json: checkbox disabled from Settings > Configuration > Syslog\n    #\n    # Optional. true or false or empty string(false)\n    Auth_By_Platform: false\n    single_cve_per_syslog: false\n    syslog_cve_in_layers: false\n    # Optional\n    Webhooks:\n      - name: myslack\n        url: http...\n        type: Slack\n        enable: true\n      - name: mywebhook\n        url: http...\n        enable: true\n    # Optional. empty string\n    Cluster_Name: cluster.local\n    # Optional. chose multiple between cpath/mutex/conn/scan/cluster or empty string\n    Controller_Debug:\n      - cpath\n    # Optional. true or false or empty string(true)\n    Monitor_Service_Mesh: true\n    # Optional. true or false or empty string(false)\n    Registry_Http_Proxy_Status: false\n    # Optional.  true or false or empty string(false)\n    Registry_Https_Proxy_Status: false\n    # Optional. http/https registry proxy or empty string\n    Registry_Http_Proxy:\n      URL: http...\n      Username: username\n      Password: password\n    Registry_Https_Proxy:\n      URL: https...\n      Username: username\n      Password: password\n    Xff_Enabled: true\n    Net_Service_Status: false\n    Net_Service_Policy_Mode: Discover\n    Scanner_Autoscale:\n    # Optional. Choose between immediate or delayed or empty string\n      Strategy: \n      Min_Pods: 1\n      Max_Pods: 3\n    # Optional. true or false or empty string(false)\n    No_Telemetry_Report: false\n    Scan_Config:\n      # Optional. true or false or empty string(false)\n      Auto_Scan: false\n    # Optional. default value is 24. unit is hour and range is between 0 and 168\n    Unused_Group_Aging: 24\n  userinitcfg.yaml: |\n    # Optional. true or false or empty string(false)\n    always_reload: false\n    users:\n    # add multiple users below\n    -\n    # this user will be added\n    # Optional.\n      EMail: user1@email.com\n    # Mandatory. username can have ^[a-zA-Z0-9]+[.:a-zA-Z0-9_-]*$\n      Fullname: user1\n    # Optional. en or zh_cn or empty string(en)\n      Locale: en\n    # Optional. password length minimal 6, don't lead with ]`}*|<>!%\n      Password: password\n    # Optional. admin or reader or empty string(none)\n      Role: reader\n    # Optional. admin group or reader group or empty string\n      Role_Domains:\n        admin:\n          - admin1\n          - admin2\n        reader:\n          - reader1\n          - reader2\n    # Optional. value between 30 -- 3600  default 300\n      Timeout: 300\n    -\n    # this user will overwrite the original admin user\n      Fullname: admin\n      Password: password\n      Role: admin\nkind: ConfigMap\nmetadata:\n  name: neuvector-init\n  namespace: neuvector\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then create the ConfigMap object:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"kubectl create -f initcfg.yaml\n"})}),"\n",(0,o.jsx)(n.h3,{id:"protect-sensitive-data-using-a-secret",children:"Protect Sensitive Data Using a Secret"}),"\n",(0,o.jsx)(n.p,{children:"If sensitive data is to be included in some sections of the configmap, a secret can be created for those sections with sensitive data."}),"\n",(0,o.jsx)(n.p,{children:"For example, create the configMap for NON-sensitive sections such as passwordProfile and role:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"kubectl create configmap neuvector-init --from-file=$HOME/init/passwordprofileinitcfg.yaml --from-file=$HOME/init/roleinitcfg.yaml -n neuvector\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then create a secret for sections with sensitive data, such as:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"kubectl create secret generic neuvector-init --from-file=$HOME/init/eulainitcfg.yaml --from-file=$HOME/init/ldapinitcfg.yaml --from-file=$HOME/init/oidcinitcfg.yaml --from-file=$HOME/init/samlinitcfg.yaml --from-file=$HOME/init/sysinitcfg.yaml --from-file=$HOME/init/userinitcfg.yaml -n neuvector\n"})}),"\n",(0,o.jsx)(n.admonition,{title:"important",type:"warning",children:(0,o.jsx)(n.p,{children:"Remove the the pipe '|' character in each section, as shown below."})}),"\n",(0,o.jsx)(n.p,{children:"Note the removal of the pipe character below if using configmap sections in a secret, enabled set to true, and uncomment out the section to be included in the secret."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"secret:\n    # NOTE: files defined here have preferrence over the ones defined in the configmap section\n    enabled: true\n    data:\n      eulainitcfg.yaml:\n        license_key: 0Bca63Iy2FiXGqjk...\n      #   ...\n      # ldapinitcfg.yaml:\n      #   directory: OpenLDAP\n      #   ...\n      # oidcinitcfg.yaml:\n      #   Issuer: https://...\n      #   ...\n      # samlinitcfg.yaml:\n      #   ...\n      # sysinitcfg.yaml:\n      #   ...\n      # userinitcfg.yaml:\n      #   ...\n"})}),"\n",(0,o.jsx)(n.p,{children:"After controller is deployed, all the configuration files from both configmap and secret will be stored in /etc/config folder."}),"\n",(0,o.jsxs)(n.p,{children:["Note that the secret is referred to in the standard Kubernetes and OpenShift Controller ",(0,o.jsx)(n.a,{href:"/deploying/kubernetes#deploy-neuvector",children:"deployment yaml files"})," under Volumes."]}),"\n",(0,o.jsx)(n.h3,{id:"configmaps-and-persistent-storage",children:"ConfigMaps and Persistent Storage"}),"\n",(0,o.jsxs)(n.p,{children:["Both the ConfigMaps and the ",(0,o.jsx)(n.a,{href:"/deploying/production#backups-and-persistent-data",children:"persistent storage"})," backup are only read when a new NeuVector cluster is deployed, or the cluster fails and is restarted. They are not used during rolling upgrades."]}),"\n",(0,o.jsx)(n.p,{children:"The persistent storage configuration backup is read first, then the ConfigMaps are applied, so ConfigMap settings take precedence. All ConfigMap settings (e.g. updates) will also be saved into persistent storage."})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var o=t(96540);const r={},a=o.createContext(r);function i(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);