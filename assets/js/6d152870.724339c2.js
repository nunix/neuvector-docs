"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9360],{94403:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=t(74848),c=t(28453);const a={title:"Replacing Internal Certificates",taxonomy:{category:"docs"},slug:"/deploying/production/internal"},o=void 0,i={id:"deploying/production/internal/internal",title:"Replacing Internal Certificates",description:"Internal Communication and Certificates",source:"@site/versioned_docs/version-5.2/02.deploying/01.production/04.internal/04.internal.md",sourceDirName:"02.deploying/01.production/04.internal",slug:"/deploying/production/internal",permalink:"/5.2/deploying/production/internal",draft:!1,unlisted:!1,editUrl:"https://github.com/neuvector/docs/edit/main/versioned_docs/version-5.2/02.deploying/01.production/04.internal/04.internal.md",tags:[],version:"5.2",sidebarPosition:4,frontMatter:{title:"Replacing Internal Certificates",taxonomy:{category:"docs"},slug:"/deploying/production/internal"},sidebar:"tutorialSidebar",previous:{title:"Environment Variables Details",permalink:"/5.2/deploying/production/details"},next:{title:"Kubernetes",permalink:"/5.2/deploying/kubernetes"}},s={},l=[{value:"Internal Communication and Certificates",id:"internal-communication-and-certificates",level:3},{value:"Replacing Certificates Used in Internal Communications of NeuVector",id:"replacing-certificates-used-in-internal-communications-of-neuvector",level:4},{value:"Updating/Deploying with Helm",id:"updatingdeploying-with-helm",level:4}];function d(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"internal-communication-and-certificates",children:"Internal Communication and Certificates"}),"\n",(0,r.jsx)(n.p,{children:"NeuVector includes default self-signed certificates for encryption for the Manager (console/UI access), Controller (REST API, internal), Enforcer (internal), and Scanner (internal) communications."}),"\n",(0,r.jsxs)(n.p,{children:["These certificates can be replaced by your own to further harden communication. For replacing certificates used by external access to NeuVector (i.e, browser to the Manager, or REST API to the Controller), please see ",(0,r.jsx)(n.a,{href:"/configuration/console/replacecert/",children:"this section"}),". See below for replacing the certificates used in internal communication between NeuVector containers."]}),"\n",(0,r.jsx)(n.p,{children:"WARNING: Replacing certificates is recommended to be performed only during initial deployment of NeuVector. Replacing on a running cluster (even with rolling upgrade) may result in an unstable state where NeuVector pods are unable to communicate with each other due to a mismatch in certificates, and DATA LOSS may occur."}),"\n",(0,r.jsx)(n.h4,{id:"replacing-certificates-used-in-internal-communications-of-neuvector",children:"Replacing Certificates Used in Internal Communications of NeuVector"}),"\n",(0,r.jsx)(n.p,{children:"To replace the internal encryption files ca.cert, cert.key, cert.pem, first create the new ca.cfg file (see sample below). Then delete the relevant file, kubernetes secret, then generate new files and secret."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"kubectl delete secret internal-cert -n neuvector\nopenssl genrsa -out ca.key 2048\nopenssl req -x509 -sha256 -new -nodes -key ca.key -days 3650 -out ca.cert\nopenssl genrsa -out cert.key 2048\nopenssl req -new -key cert.key -sha256 -out cert.csr -config ca.cfg\nopenssl req -in cert.csr -noout -text\nopenssl x509 -req -sha256 -in cert.csr -CA ca.cert -CAkey ca.key -CAcreateserial -out cert.pem -days 3650 -extfile ca.cfg\n    // for sample ca.cfg see below, or see https://open-docs.neuvector.com/configuration/console/replacecert\nopenssl x509 -in cert.pem -text\nkubectl create secret generic internal-cert -n neuvector --from-file=cert.key --from-file=cert.pem --from-file=ca.cert\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then edit the Controller, Enforcer, and Scanner deployment yamls, adding:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"      containers:\n        - name: neuvector-controller/enforcer/scanner-pod\n          volumeMounts:\n            - mountPath: /etc/neuvector/certs/internal/cert.key\n              name: internal-cert\n              readOnly: true\n              subPath: cert.key\n            - mountPath: /etc/neuvector/certs/internal/cert.pem\n              name: internal-cert\n              readOnly: true\n              subPath: cert.pem\n            - mountPath: /etc/neuvector/certs/internal/ca.cert\n              name: internal-cert\n              readOnly: true\n              subPath: ca.cert\n      volumes:\n        - name: internal-cert\n          secret:\n            defaultMode: 420\n            secretName: internal-cert\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then proceed to deploy NeuVector as before. You can also shell into the controller/enforcer/scanner pods to confirm that the ca.cert, cert.key, cert.pem files are the customized ones and that the NeuVector communications are working using the new certificates."}),"\n",(0,r.jsx)(n.p,{children:"Sample ca.cfg file referenced above:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"[req]\ndistinguished_name = req_distinguished_name\nx509_extensions = v3_req\nprompt = no\n[req_distinguished_name]\nC = US\nST = California\nL = San Jose\nO = NeuVector Inc.\nOU = Neuvector\nCN = Neuvector\n[v3_req]\nkeyUsage = keyEncipherment, dataEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = *\n"})}),"\n",(0,r.jsx)(n.p,{children:"Sample patch commands for controller (change namespace to cattle-neuvector-system if needed, and modify for use on enforcer, scanner):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'NAMESPACE=neuvector\n\nkubectl patch deployment -n ${NAMESPACE} neuvector-controller-pod --type=\'json\' -p=\'[{"op": "add", "path": "/spec/template/spec/volumes/-", "value": {"name": "internal-cert", "secret": {"defaultMode": 420, "secretName": "internal-cert"}} } ]\'\n\nkubectl patch deployment -n ${NAMESPACE} neuvector-controller-pod --type=\'json\' -p=\'[{"op": "add", "path": "/spec/template/spec/containers/0/volumeMounts", "value": [{"mountPath": "/etc/neuvector/certs/internal/cert.key", "name": "internal-cert", "readOnly": true, "subPath": "cert.key"}, {"mountPath": "/etc/neuvector/certs/internal/cert.pem", "name": "internal-cert", "readOnly": true, "subPath": "cert.pem"}, {"mountPath": "/etc/neuvector/certs/internal/ca.cert", "name": "internal-cert", "readOnly": true, "subPath": "ca.cert"} ] } ]\'\n'})}),"\n",(0,r.jsx)(n.h4,{id:"updatingdeploying-with-helm",children:"Updating/Deploying with Helm"}),"\n",(0,r.jsxs)(n.p,{children:["As of Helm chart ",(0,r.jsx)(n.code,{children:"2.4.1"})," we can now manage the internal certificate install. The chart ",(0,r.jsx)(n.a,{href:"https://github.com/neuvector/neuvector-helm/blob/master/charts/core/values.yaml",children:"values.yaml"})," should be reviewed for all the settings. The below example uses RKE2, standard Ingress and installer certificates."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# add chart\nhelm repo add neuvector https://neuvector.github.io/neuvector-helm/\n\n# update chart\nhelm repo update\n\n# add domain for ingress\nexport domain=awesome.sauce\n\n# run the helm \nhelm upgrade -i neuvector -n neuvector neuvector/core --create-namespace  --set imagePullSecrets=regsecret --set k3s.enabled=true --set k3s.runtimePath=/run/k3s/containerd/containerd.sock --set manager.ingress.enabled=true --set manager.ingress.host=neuvector.$domain --set manager.svc.type=ClusterIP --set controller.pvc.enabled=true --set controller.pvc.capacity=500Mi --set controller.internal.certificate.secret=internal-cert --set cve.scanner.internal.certificate.secret=internal-cert --set enforcer.internal.certificate.secret=internal-cert\n"})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(96540);const c={},a=r.createContext(c);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);