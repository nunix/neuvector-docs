"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1441],{25754:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>i});var r=n(74848),c=n(28453);const l={title:"Replacing Internal Certificates",taxonomy:{category:"docs"},slug:"/deploying/production/internal"},s=void 0,o={id:"deploying/production/internal/internal",title:"Replacing Internal Certificates",description:"Internal Communication and Certificates",source:"@site/docs/02.deploying/01.production/04.internal/04.internal.md",sourceDirName:"02.deploying/01.production/04.internal",slug:"/deploying/production/internal",permalink:"/next/deploying/production/internal",draft:!1,unlisted:!1,editUrl:"https://github.com/neuvector/docs/edit/main/docs/02.deploying/01.production/04.internal/04.internal.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Replacing Internal Certificates",taxonomy:{category:"docs"},slug:"/deploying/production/internal"},sidebar:"tutorialSidebar",previous:{title:"Environment Variables Details",permalink:"/next/deploying/production/details"},next:{title:"Kubernetes",permalink:"/next/deploying/kubernetes"}},a={},i=[{value:"Internal Communication and Certificates",id:"internal-communication-and-certificates",level:3},{value:"Replacing Certificates Used in Internal Communications of NeuVector",id:"replacing-certificates-used-in-internal-communications-of-neuvector",level:4},{value:"Updating/Deploying with Helm",id:"updatingdeploying-with-helm",level:4}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components},{TabItem:n,Tabs:l}=t;return n||h("TabItem",!0),l||h("Tabs",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h3,{id:"internal-communication-and-certificates",children:"Internal Communication and Certificates"}),"\n",(0,r.jsx)(t.p,{children:"NeuVector includes default self-signed certificates for encryption for the Manager (console/UI access), Controller (REST API, internal), Enforcer (internal), and Scanner (internal) communications."}),"\n",(0,r.jsxs)(t.p,{children:["These certificates can be replaced by your own to further harden communication. For replacing certificates used by external access to NeuVector (i.e, browser to the Manager, or REST API to the Controller), please see ",(0,r.jsx)(t.a,{href:"/configuration/console/replacecert/",children:"this section"}),". See below for replacing the certificates used in internal communication between NeuVector containers."]}),"\n",(0,r.jsx)(t.p,{children:"WARNING: Replacing certificates is recommended to be performed only during initial deployment of NeuVector. Replacing on a running cluster (even with rolling upgrade) may result in an unstable state where NeuVector pods are unable to communicate with each other due to a mismatch in certificates, and DATA LOSS may occur."}),"\n",(0,r.jsx)(t.h4,{id:"replacing-certificates-used-in-internal-communications-of-neuvector",children:"Replacing Certificates Used in Internal Communications of NeuVector"}),"\n",(0,r.jsxs)(t.p,{children:["Replace the internal encryption files ",(0,r.jsx)(t.code,{children:"ca.crt"}),", ",(0,r.jsx)(t.code,{children:"tls.key"}),", ",(0,r.jsx)(t.code,{children:"tls.crt"})," as follows:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Create a new ",(0,r.jsx)(t.code,{children:"ca.cfg"})," file with your favorite editor:"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"[req]\ndistinguished_name = req_distinguished_name\nx509_extensions = v3_req\nprompt = no\n[req_distinguished_name]\nC = US\nST = California\nL = San Jose\nO = NeuVector Inc.\nOU = Neuvector\nCN = Neuvector\n[v3_req]\nkeyUsage = digitalSignature, keyEncipherment, dataEncipherment\nextendedKeyUsage = serverAuth, clientAuth\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = Neuvector\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["For additional information on ",(0,r.jsx)(t.code,{children:"ca.cfg"}),", see ",(0,r.jsx)(t.a,{href:"https://open-docs.neuvector.com/configuration/console/replacecert",children:"https://open-docs.neuvector.com/configuration/console/replacecert"}),"."]})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Choose your scenario from the three options below:"}),"\n"]}),"\n",(0,r.jsxs)(l,{children:[(0,r.jsxs)(n,{value:"new_cert",label:"New certificate",children:[(0,r.jsx)(t.p,{children:"If your certificate is about to expire and you need to generate a new one, follow the steps below:"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Delete the old ",(0,r.jsx)(t.code,{children:"ca.crt"}),", ",(0,r.jsx)(t.code,{children:"tls.key"}),", ",(0,r.jsx)(t.code,{children:"tls.crt"}),", kubernetes secret, and generate new ones:"]}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl delete secret internal-cert -n neuvector\nopenssl genrsa -out ca.key 2048\nopenssl req -x509 -sha256 -new -nodes -key ca.key -days 3650 -out ca.crt\nopenssl genrsa -out tls.key 2048\nopenssl req -new -key tls.key -sha256 -out cert.csr -config ca.cfg\nopenssl req -in cert.csr -noout -text\nopenssl x509 -req -sha256 -in cert.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out tls.crt -days 3650 -extensions 'v3_req' -extfile ca.cfg\nopenssl x509 -in tls.crt -text\nkubectl create secret generic internal-cert -n neuvector  --from-file=tls.key --from-file=tls.crt --from-file=ca.crt\n"})}),(0,r.jsx)(t.p,{children:"Then edit the Controller, Enforcer, and Scanner deployment yamls, adding:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"      containers:\n        - name: neuvector-controller/enforcer/scanner-pod\n          volumeMounts:\n            - mountPath: /etc/neuvector/certs/internal/tls.key\n              name: internal-cert\n              readOnly: true\n              subPath: tls.key\n            - mountPath: /etc/neuvector/certs/internal/tls.crt\n              name: internal-cert\n              readOnly: true\n              subPath: tls.crt\n            - mountPath: /etc/neuvector/certs/internal/ca.crt\n              name: internal-cert\n              readOnly: true\n              subPath: ca.crt\n      volumes:\n        - name: internal-cert\n          secret:\n            defaultMode: 420\n            secretName: internal-cert\n"})}),(0,r.jsx)(t.p,{children:"Then proceed to deploy NeuVector as before. You can also shell into the controller/enforcer/scanner pods to confirm that the ca.crt, tls.key, tls.crt files are the customized ones and that the NeuVector communications are working using the new certificates."}),(0,r.jsx)(t.p,{children:"Sample patch commands for controller (change namespace to cattle-neuvector-system if needed, and modify for use on enforcer, scanner):"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'NAMESPACE=neuvector\n\nkubectl patch deployment -n ${NAMESPACE} neuvector-controller-pod --type=\'json\' -p=\'[{"op": "add", "path": "/spec/template/spec/volumes/-", "value": {"name": "internal-cert", "secret": {"defaultMode": 420, "secretName": "internal-cert"}} } ]\'\n\nkubectl patch deployment -n ${NAMESPACE} neuvector-controller-pod --type=\'json\' -p=\'[{"op": "add", "path": "/spec/template/spec/containers/0/volumeMounts", "value": [{"mountPath": "/etc/neuvector/certs/internal/cert.key", "name": "internal-cert", "readOnly": true, "subPath": "cert.key"}, {"mountPath": "/etc/neuvector/certs/internal/cert.pem", "name": "internal-cert", "readOnly": true, "subPath": "cert.pem"}, {"mountPath": "/etc/neuvector/certs/internal/ca.cert", "name": "internal-cert", "readOnly": true, "subPath": "ca.cert"} ] } ]\'\n'})})]}),(0,r.jsxs)(n,{value:"update_cert",label:"Update current certificate with SANs",children:[(0,r.jsx)(t.p,{children:"If your certificate files were created before NeuVector version 5.3, you need to upate the certificate with at least one Subject Alternative Name, or SAN for short."}),(0,r.jsxs)(t.p,{children:["If you still have the files ",(0,r.jsx)(t.code,{children:"ca.key"})," and ",(0,r.jsx)(t.code,{children:"ca.crt"})," accessible, run the commands as follows:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl delete secret internal-cert -n neuvector\nopenssl genrsa -out tls.key 2048\nopenssl req -new -key tls.key -sha256 -out cert.csr -config ca-new.cfg\nopenssl req -in cert.csr -noout -text\nopenssl x509 -req -sha256 -in cert.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out tls.crt -days 3650 -extensions 'v3_req' -extfile ca-new.cfg\nopenssl x509 -in tls.crt -text\nkubectl create secret generic internal-cert -n neuvector  --from-file=tls.key --from-file=tls.crt --from-file=ca.crt\n"})}),(0,r.jsx)(t.p,{children:"Once the certificate files have been updated, restart the deployments in order to use the updated certificate:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl rollout restart deployment neuvector-controller-pod\nkubectl rollout restart deployment neuvector-scanner-pod\nkubectl rollout restart deployment neuvector-registry-adapter-pod \nkubectl rollout restart ds neuvector-enforcer-pod\n\n"})})]}),(0,r.jsxs)(n,{value:"regenarate_cert",label:"Regenarate certificate files and add SANs",children:[(0,r.jsx)(t.p,{children:"If your certificate files were created before NeuVector version 5.3, you need to upate the certificate with at least one Subject Alternative Name, or SAN for short."}),(0,r.jsxs)(t.p,{children:["If you don\xb4t have the files ",(0,r.jsx)(t.code,{children:"ca.key"})," and ",(0,r.jsx)(t.code,{children:"ca.crt"})," anymore, follow the steps below:"]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Backup your original certificate"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl get secret internal-cert -o yaml > internal-cert.yaml\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Export the existing internal-cert"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl get secret internal-cert -o json | jq -r '.data.\"ca.crt\"' | base64 -d > old-ca.crt\nkubectl get secret internal-cert -o json | jq -r '.data.\"tls.crt\"' | base64 -d > old-tls.crt\nkubectl get secret internal-cert -o json | jq -r '.data.\"tls.key\"' | base64 -d > old-tls.key\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Create new certificate files and internal certificates"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"openssl genrsa -out ca.key 2048\nopenssl req -x509 -sha256 -new -nodes -key ca.key -days 3650 -out ca.crt\nopenssl genrsa -out tls.key 2048\nopenssl req -new -key tls.key -sha256 -out cert.csr -config ca.cfg\nopenssl req -in cert.csr -noout -text\nopenssl x509 -req -sha256 -in cert.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out tls.crt -days 3650 -extensions 'v3_req' -extfile ca.cfg\nopenssl x509 -in tls.crt -text\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Update the certificate files on the host"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"cat old-ca.crt > /tmp/ca.crt\ncat ca.crt >> /tmp/ca.crt\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Update the Kubernetes secret with the new ",(0,r.jsx)(t.code,{children:"ca.crt"})]}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl delete secret internal-cert -n neuvector\nkubectl create secret generic internal-cert -n neuvector  --from-file=tls.key=old-tls.key --from-file=tls.crt=old-tls.crt --from-file=ca.crt=/tmp/ca.crt\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Restart the deployments in order to use the updated certificate"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl rollout restart deployment neuvector-controller-pod\nkubectl rollout restart deployment neuvector-scanner-pod\nkubectl rollout restart deployment neuvector-registry-adapter-pod \nkubectl rollout restart ds neuvector-enforcer-pod\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Wait for the restart to complete"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl rollout status deployment neuvector-controller-pod\nkubectl rollout status deployment neuvector-scanner-pod\nkubectl rollout status deployment neuvector-registry-adapter-pod \nkubectl rollout status ds neuvector-enforcer-pod\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Make sure the console can be accessed and controllers are all online."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Update the Kubernetes secret with the new ",(0,r.jsx)(t.code,{children:"ca.crt"})]}),"\n"]}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl delete secret internal-cert -n neuvector\nkubectl create secret generic internal-cert -n neuvector  --from-file=tls.key=old-tls.key --from-file=tls.crt=old-tls.crt --from-file=ca.crt=/tmp/ca.crt\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Restart the deployments in order to use the updated certificate"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl rollout restart deployment neuvector-controller-pod\nkubectl rollout restart deployment neuvector-scanner-pod\nkubectl rollout restart deployment neuvector-registry-adapter-pod \nkubectl rollout restart ds neuvector-enforcer-pod\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Wait for the restart to complete"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl rollout status deployment neuvector-controller-pod\nkubectl rollout status deployment neuvector-scanner-pod\nkubectl rollout status deployment neuvector-registry-adapter-pod \nkubectl rollout status ds neuvector-enforcer-pod\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Make sure the console can be accessed and controllers are all online."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Update the Kubernetes secret with the new ",(0,r.jsx)(t.code,{children:"ca.crt"})]}),"\n"]}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl delete secret internal-cert -n neuvector\nkubectl create secret generic internal-cert -n neuvector  --from-file=tls.key=old-tls.key --from-file=tls.crt=old-tls.crt --from-file=ca.crt=/tmp/ca.crt\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Restart the deployments in order to use the updated certificate"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl rollout restart deployment neuvector-controller-pod\nkubectl rollout restart deployment neuvector-scanner-pod\nkubectl rollout restart deployment neuvector-registry-adapter-pod \nkubectl rollout restart ds neuvector-enforcer-pod\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Wait for the restart to complete"}),"\n"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"kubectl rollout status deployment neuvector-controller-pod\nkubectl rollout status deployment neuvector-scanner-pod\nkubectl rollout status deployment neuvector-registry-adapter-pod \nkubectl rollout status ds neuvector-enforcer-pod\n"})}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Make sure the console can be accessed and controllers are all online."}),"\n"]})]})]}),"\n",(0,r.jsx)(t.h4,{id:"updatingdeploying-with-helm",children:"Updating/Deploying with Helm"}),"\n",(0,r.jsxs)(t.p,{children:["As of Helm chart ",(0,r.jsx)(t.code,{children:"2.4.1"})," we can now manage the internal certificate install. The chart ",(0,r.jsx)(t.a,{href:"https://github.com/neuvector/neuvector-helm/blob/master/charts/core/values.yaml",children:"values.yaml"})," should be reviewed for all the settings. The below example uses RKE2, standard Ingress and installer certificates."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"# add chart\nhelm repo add neuvector https://neuvector.github.io/neuvector-helm/\n\n# update chart\nhelm repo update\n\n# add domain for ingress\nexport domain=awesome.sauce\n\n# run the helm \nhelm upgrade -i neuvector -n neuvector neuvector/core --create-namespace  --set imagePullSecrets=regsecret --set k3s.enabled=true --set k3s.runtimePath=/run/k3s/containerd/containerd.sock --set manager.ingress.enabled=true --set manager.ingress.host=neuvector.$domain --set manager.svc.type=ClusterIP --set controller.pvc.enabled=true --set controller.pvc.capacity=500Mi --set controller.internal.certificate.secret=internal-cert --set cve.scanner.internal.certificate.secret=internal-cert --set enforcer.internal.certificate.secret=internal-cert\n"})})]})}function u(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}function h(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(96540);const c={},l=r.createContext(c);function s(e){const t=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),r.createElement(l.Provider,{value:t},e.children)}}}]);